@require(passthru, functions, enums, options, version, extensions)
/* WARNING: This file was automatically generated */
/* Do not edit. */

#ifndef __gl_h_
#define __gl_h_

#ifdef __cplusplus
extern "C" {
#endif

/* Function declaration macros - to move into glplatform.h */

#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#define WIN32_LEAN_AND_MEAN 1
#ifndef WINAPI
#define WINAPI __stdcall
#endif
#define APIENTRY WINAPI
#endif

#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif
#ifndef GLAPI
#define GLAPI extern
#endif

/* -------------------------------- DATA TYPES ------------------------------- */

#include <stddef.h>
#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glxext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GL_EXT_timer_query extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif

@passthru

/* ----------------------------------- ENUMS --------------------------------- */

@enums

/* --------------------------- FUNCTION PROTOTYPES --------------------------- */

@for cat,funcs in functions:

/* GL_@cat */

    @for f in funcs:
typedef @f.returntype (APIENTRY PFNGL@f.name.upper()_PROC (@f.param_list_string()));
    @end

    @for f in funcs:
GLAPI PFNGL@f.name.upper()_PROC* glpf@f.name;
    @end

    @for f in funcs:
#define gl@f.name glpf@f.name
    @end

@end

/* --------------------------- CATEGORY DEFINES ------------------------------ */

@for cat,funcs in functions:
#define GL_@cat
@end

/* ---------------------- Flags for optional extensions ---------------------- */


@for extension,required in extensions:
extern int FLEXT_@extension;
@end

int flextInit(void);

#define FLEXT_MAJOR_VERSION @version.major!s
#define FLEXT_MINOR_VERSION @version.minor!s
@if version.profile == 'core':
#define FLEXT_CORE_PROFILE 1
@else:
#define FLEXT_CORE_PROFILE 0
@end

#ifdef __cplusplus
}
#endif

#endif /* _gl_h_ */
