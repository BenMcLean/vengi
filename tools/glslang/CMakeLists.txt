set(CMAKE_CXX_CLANG_TIDY "")
set(CMAKE_CXX_INCLUDE_WHAT_YOU_USE "")
set(CMAKE_LINK_WHAT_YOU_USE FALSE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION FALSE)
set(GLSLANG_GENERATED_INCLUDEDIR "${CMAKE_BINARY_DIR}/include")

project(glslang)

FILE(MAKE_DIRECTORY ${GLSLANG_GENERATED_INCLUDEDIR}/${PROJECT_NAME})

if(WIN32)
	include(ChooseMSVCCRT.cmake)
	add_definitions(-DGLSLANG_OSINCLUDE_WIN32)
elseif(UNIX)
	add_definitions(-fPIC)
	add_definitions(-DGLSLANG_OSINCLUDE_UNIX)
else(WIN32)
	message("unknown platform")
endif(WIN32)

function(glslang_set_link_args TARGET)
	# For MinGW compiles, statically link against the GCC and C++ runtimes.
	# This avoids the need to ship those runtimes as DLLs.
	if(WIN32)
		if(${CMAKE_CXX_COMPILER_ID} MATCHES "GNU")
			set_target_properties(${TARGET} PROPERTIES LINK_FLAGS "-static -static-libgcc -static-libstdc++")
		endif()
	endif(WIN32)
endfunction(glslang_set_link_args)

# glslang_add_build_info_dependency() adds the glslang-build-info dependency and
# generated include directories to target.
function(glslang_add_build_info_dependency target)
    target_include_directories(${target} PUBLIC $<BUILD_INTERFACE:${GLSLANG_GENERATED_INCLUDEDIR}>)
endfunction()

function(glslang_only_export_explicit_symbols target)
endfunction()

function(glslang_pch target pch)
endfunction()

set(ENABLE_SPVREMAPPER On)
add_subdirectory(glslang)
add_subdirectory(OGLCompilersDLL)
add_subdirectory(StandAlone)
add_subdirectory(SPIRV)
target_compile_definitions(glslangValidator PRIVATE "-DENABLE_OPT=0")
target_include_directories(MachineIndependent PRIVATE .)
target_include_directories(SPIRV PRIVATE .)

if (NOT MSVC)
	set(ADDITIONAL_COMPILE_FLAGS)
	check_c_compiler_flag("-Wimplicit-fallthrough=0" HAS_IMPLICIT_FALLTHROUGH)
	if (HAS_IMPLICIT_FALLTHROUGH)
		set(ADDITIONAL_COMPILE_FLAGS "${ADDITIONAL_COMPILE_FLAGS} -Wimplicit-fallthrough=0")
	endif()
	check_cxx_compiler_flag("-Wno-deprecated-copy" HAS_DEPRECATED_COPY)
	if (HAS_DEPRECATED_COPY)
		set(ADDITIONAL_COMPILE_FLAGS "${ADDITIONAL_COMPILE_FLAGS} -Wno-deprecated-copy")
	endif()
	check_c_compiler_flag("-Wno-unused-function" HAS_NO_UNUSED_FUNCTION)
	if (HAS_NO_UNUSED_FUNCTION)
		set(ADDITIONAL_COMPILE_FLAGS "${ADDITIONAL_COMPILE_FLAGS} -Wno-unused-function")
	endif()
	set_target_properties(glslang PROPERTIES COMPILE_FLAGS "-Wno-undef -Wno-reorder -Wno-shadow -Wno-unknown-pragmas -Wno-non-virtual-dtor -Wno-missing-field-initializers -Wno-ignored-qualifiers ${ADDITIONAL_COMPILE_FLAGS}")
	set_target_properties(spirv-remap PROPERTIES COMPILE_FLAGS "-Wno-undef -Wno-reorder -Wno-shadow -Wno-unknown-pragmas -Wno-non-virtual-dtor -Wno-missing-field-initializers -Wno-ignored-qualifiers ${ADDITIONAL_COMPILE_FLAGS}")
	set_target_properties(glslangValidator PROPERTIES COMPILE_FLAGS "-Wno-undef -Wno-reorder -Wno-shadow -Wno-unknown-pragmas -Wno-non-virtual-dtor -Wno-missing-field-initializers -Wno-ignored-qualifiers ${ADDITIONAL_COMPILE_FLAGS}")
	set_target_properties(glslang-default-resource-limits PROPERTIES COMPILE_FLAGS "-Wno-undef -Wno-reorder -Wno-shadow -Wno-unknown-pragmas -Wno-non-virtual-dtor -Wno-missing-field-initializers -Wno-ignored-qualifiers ${ADDITIONAL_COMPILE_FLAGS}")
	set_target_properties(MachineIndependent PROPERTIES COMPILE_FLAGS "-Wno-undef -Wno-reorder -Wno-shadow -Wno-unknown-pragmas -Wno-non-virtual-dtor -Wno-missing-field-initializers -Wno-ignored-qualifiers ${ADDITIONAL_COMPILE_FLAGS}")
	if (ENABLE_SPVREMAPPER)
		set_target_properties(SPVRemapper PROPERTIES COMPILE_FLAGS "-Wno-undef -Wno-reorder -Wno-shadow -Wno-non-virtual-dtor -Wno-missing-field-initializers -Wno-ignored-qualifiers ${ADDITIONAL_COMPILE_FLAGS}")
	endif()
	set_target_properties(SPIRV PROPERTIES COMPILE_FLAGS "-Wno-undef -Wno-reorder -Wno-shadow -Wno-unused-variable -Wno-non-virtual-dtor -Wno-missing-field-initializers -Wno-ignored-qualifiers ${ADDITIONAL_COMPILE_FLAGS}")
	set_target_properties(OGLCompiler PROPERTIES COMPILE_FLAGS "-Wno-undef -Wno-reorder -Wno-shadow -Wno-unused-variable -Wno-non-virtual-dtor -Wno-missing-field-initializers -Wno-ignored-qualifiers ${ADDITIONAL_COMPILE_FLAGS}")
endif()
