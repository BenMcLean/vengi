/**
 * @file
 */

#include "NormalPalette.h"
#include "app/App.h"
#include "core/ArrayLength.h"
#include "core/Common.h"
#include "core/Hash.h"
#include "core/Log.h"
#include "core/StringUtil.h"
#include "io/FileStream.h"
#include "palette/Palette.h"
#include "palette/private/PaletteFormat.h"

#include <glm/geometric.hpp>
#include <glm/vec3.hpp>

namespace palette {
namespace priv {

static const glm::vec3 tsnormals[]{
	{0.671213984489441, 0.198492005467415, -0.714193999767303},
	{0.269643008708954, 0.584393978118897, -0.765359997749329},
	{-0.0405460000038147, 0.0969879999756813, -0.994458973407745},
	{-0.572427988052368, -0.0919139981269836, -0.814786970615387},
	{-0.171400994062424, -0.572709977626801, -0.801639020442963},
	{0.362556993961334, -0.30299898982048, -0.881331026554108},
	{0.810347020626068, -0.348971992731094, -0.470697999000549},
	{0.103961996734142, 0.938672006130218, -0.328767001628876},
	{-0.32404699921608, 0.587669014930725, -0.741375982761383},
	{-0.800864994525909, 0.340460985898972, -0.492646992206574},
	{-0.665498018264771, -0.590147018432617, -0.456988990306854},
	{0.314767003059387, -0.803001999855042, -0.506072998046875},
	{0.972629010677338, 0.151076003909111, -0.176550000905991},
	{0.680290997028351, 0.684235990047455, -0.262726992368698},
	{-0.520079016685486, 0.827777028083801, -0.210482999682426},
	{-0.961643993854523, -0.179001003503799, -0.207846999168396},
	{-0.262713998556137, -0.937451004981995, -0.228401005268097},
	{0.219706997275352, -0.971301019191742, 0.0911249965429306},
	{0.923807978630066, -0.229975000023842, 0.306086987257004},
	{-0.0824889987707138, 0.970659971237183, 0.225866004824638},
	{-0.591798007488251, 0.696789979934692, 0.405288994312286},
	{-0.925296008586884, 0.36660099029541, 0.0971110016107559},
	{-0.705051004886627, -0.687775015830994, 0.172828003764153},
	{0.732400000095367, -0.680366992950439, -0.0263049993664026},
	{0.855162024497986, 0.37458199262619, 0.358310997486114},
	{0.473006010055542, 0.836480021476746, 0.276704996824265},
	{-0.0976170003414154, 0.654111981391907, 0.750072002410889},
	{-0.904124021530151, -0.153724998235703, 0.398658007383347},
	{-0.211915999650955, -0.858089983463287, 0.467732012271881},
	{0.500226974487305, -0.67440801858902, 0.543090999126434},
	{0.584538996219635, -0.110248997807503, 0.8038409948349},
	{0.437373012304306, 0.454643994569778, 0.775888979434967},
	{-0.0424409992992878, 0.0833180025219917, 0.995618999004364},
	{-0.596251010894775, 0.220131993293762, 0.772028028964996},
	{-0.50645500421524, -0.396977007389069, 0.765448987483978},
	{0.0705690011382103, -0.478473991155624, 0.875262022018433},
};

static const glm::vec3 ra2normals[]{{0.526578009128571, -0.359620988368988, -0.770317018032074},
									{0.150481998920441, 0.43598398566246, 0.887283980846405},
									{0.414195001125336, 0.738255023956299, -0.532374024391174},
									{0.0751520022749901, 0.916248977184296, -0.393498003482819},
									{-0.316148996353149, 0.930736005306244, -0.183792993426323},
									{-0.773819029331207, 0.623333990573883, -0.112510003149509},
									{-0.900842010974884, 0.428537011146545, -0.0695680007338524},
									{-0.998942017555237, -0.010971000418067, 0.0446650013327599},
									{-0.979761004447937, -0.157670006155968, -0.123323999345303},
									{-0.911274015903473, -0.362370997667313, -0.195620000362396},
									{-0.624068975448608, -0.720941007137299, -0.301301002502441},
									{-0.310173004865646, -0.809345006942749, -0.498751997947693},
									{0.146613001823425, -0.815819025039673, -0.559414029121399},
									{-0.716516017913818, -0.694356024265289, -0.0668879970908165},
									{0.503971993923187, -0.114202000200748, -0.856136977672577},
									{0.455491006374359, 0.872627019882202, -0.176210999488831},
									{-0.00500999996438622, -0.114372998476028, -0.993425011634827},
									{-0.104675002396107, -0.32770100235939, -0.938965022563934},
									{0.560411989688873, 0.752588987350464, -0.345755994319916},
									{-0.0605759993195534, 0.821627974510193, -0.566796004772186},
									{-0.302341014146805, 0.797007024288178, -0.52284699678421},
									{-0.671543002128601, 0.670740008354187, -0.314862996339798},
									{-0.778401017189026, -0.128356993198395, 0.614504992961884},
									{-0.924049973487854, 0.278382003307343, -0.261985003948212},
									{-0.699773013591766, -0.550490975379944, -0.455278009176254},
									{-0.568247973918915, -0.517189025878906, -0.640007972717285},
									{0.0540979988873005, -0.932864010334015, -0.356142997741699},
									{0.758382022380829, 0.572893023490906, -0.31088799238205},
									{0.00362000009045005, 0.305025994777679, -0.952337026596069},
									{-0.0608499981462956, -0.986886024475098, -0.149510994553566},
									{0.635230004787445, 0.0454780012369156, -0.770982980728149},
									{0.521704971790314, 0.241309002041817, -0.818287014961243},
									{0.269403994083405, 0.635424971580505, -0.723640978336334},
									{0.0456760004162788, 0.672753989696503, -0.73845499753952},
									{-0.180510997772217, 0.674656987190247, -0.715718984603882},
									{-0.397130995988846, 0.636640012264252, -0.661041975021362},
									{-0.552003979682922, 0.472514986991882, -0.687038004398346},
									{-0.772170007228851, 0.0830899998545647, -0.629960000514984},
									{-0.669818997383118, -0.119533002376556, -0.732840001583099},
									{-0.540454983711243, -0.318444013595581, -0.77878201007843},
									{-0.386135011911392, -0.522789001464844, -0.759993970394135},
									{-0.26146599650383, -0.688566982746124, -0.676394999027252},
									{-0.0194119997322559, -0.696102976799011, -0.717679977416992},
									{0.303568989038467, -0.481844007968903, -0.821992993354797},
									{0.681939005851746, -0.195129007101059, -0.704900026321411},
									{-0.244889006018639, -0.116562001407146, -0.962518990039825},
									{0.800759017467499, -0.0229790005832911, -0.598546028137207},
									{-0.370274990797043, 0.0955839976668358, -0.923991024494171},
									{-0.330671012401581, -0.326577991247177, -0.885439991950989},
									{-0.163220003247261, -0.527579009532928, -0.833679020404816},
									{0.126389995217323, -0.313145995140076, -0.941256999969482},
									{0.349548012018204, -0.272226005792618, -0.896498024463654},
									{0.239917993545532, -0.0858250036835671, -0.966992020606995},
									{0.390845000743866, 0.0815370008349419, -0.916837990283966},
									{0.2552669942379, 0.268696993589401, -0.928785026073456},
									{0.146245002746582, 0.480437994003296, -0.864749014377594},
									{-0.326016008853912, 0.478455990552902, -0.815348982810974},
									{-0.46968200802803, -0.112519003450871, -0.875635981559753},
									{0.818440020084381, -0.258520007133484, -0.513150990009308},
									{-0.474317997694015, 0.292237997055054, -0.830433011054993},
									{0.778943002223969, 0.395841985940933, -0.486371010541916},
									{0.624094009399414, 0.39377298951149, -0.674870014190674},
									{0.740885972976685, 0.203833997249603, -0.639953017234802},
									{0.480217009782791, 0.565768003463745, -0.670297026634216},
									{0.380930006504059, 0.424535006284714, -0.821377992630005},
									{-0.0934220030903816, 0.501124024391174, -0.860318005084991},
									{-0.236485004425049, 0.296198010444641, -0.925387024879456},
									{-0.131531000137329, 0.0939590036869049, -0.986849009990692},
									{-0.823562026023865, 0.29577699303627, -0.484005987644196},
									{0.611065983772278, -0.624303996562958, -0.486663997173309},
									{0.0694959983229637, -0.520330011844635, -0.851132988929748},
									{0.226521998643875, -0.664879024028778, -0.711775004863739},
									{0.471307992935181, -0.568903982639313, -0.673956990242004},
									{0.38842499256134, -0.74262398481369, -0.545560002326965},
									{0.783675014972687, -0.480729013681412, -0.393384993076324},
									{0.962393999099731, 0.135675996541977, -0.235348999500275},
									{0.876607000827789, 0.172033995389938, -0.449405997991562},
									{0.633405029773712, 0.589793026447296, -0.500940978527069},
									{0.182275995612144, 0.800657987594605, -0.570720970630646},
									{0.177002996206284, 0.764133989810944, 0.620297014713287},
									{-0.544016003608704, 0.675514996051788, -0.497720986604691},
									{-0.679296970367432, 0.286466985940933, -0.675642013549805},
									{-0.590390980243683, 0.0913690030574799, -0.801928997039795},
									{-0.824360013008118, -0.133123993873596, -0.550189018249512},
									{-0.715794026851654, -0.334542006254196, -0.612960994243622},
									{0.174285992980003, -0.8924840092659, 0.416049003601074},
									{-0.0825280025601387, -0.837122976779938, -0.54075300693512},
									{0.283331006765366, -0.88087397813797, -0.379189014434814},
									{0.675134003162384, -0.42662701010704, -0.601817011833191},
									{0.843720018863678, -0.512335002422333, -0.16015599668026},
									{0.977303981781006, -0.0985559970140457, -0.187519997358322},
									{0.84629499912262, 0.52267199754715, -0.102946996688843},
									{0.677141010761261, 0.721324980258942, -0.145501002669334},
									{0.320964992046356, 0.870891988277435, -0.372193992137909},
									{-0.178977996110916, 0.911532998085022, -0.37023600935936},
									{-0.447169005870819, 0.826700985431671, -0.341473996639252},
									{-0.703203022480011, 0.496327996253967, -0.50908100605011},
									{-0.977181017398834, 0.0635629966855049, -0.202674001455307},
									{-0.878170013427734, -0.412937998771667, 0.241455003619194},
									{-0.835830986499786, -0.358550012111664, -0.415728002786636},
									{-0.499173998832703, -0.693432986736298, -0.519591987133026},
									{-0.188788995146751, -0.923753023147583, -0.333225011825562},
									{0.19225400686264, -0.969361007213593, -0.152896001935005},
									{0.515940010547638, -0.783906996250153, -0.345391988754272},
									{0.90592497587204, -0.300951987504959, -0.297870993614197},
									{0.991111993789673, -0.127746000885963, 0.0371069982647896},
									{0.995135009288788, 0.0984240025281906, -0.0043830000795424},
									{0.760123014450073, 0.646277010440826, 0.0673670023679733},
									{0.205220997333527, 0.95958000421524, -0.192590996623039},
									{-0.0427500009536743, 0.979512989521027, -0.196790993213654},
									{-0.438017010688782, 0.898926973342895, 0.00849200040102005},
									{-0.821994006633759, 0.480785012245178, -0.305238991975784},
									{-0.899917006492615, 0.0817100033164024, -0.428337007761002},
									{-0.926612019538879, -0.144618004560471, -0.347095996141434},
									{-0.79365998506546, -0.557792007923126, -0.242838993668556},
									{-0.431349992752075, -0.847778975963593, -0.308557987213135},
									{-0.00549199990928173, -0.964999973773956, 0.262192994356155},
									{0.587904989719391, -0.804026007652283, -0.0889400020241737},
									{0.699492990970612, -0.667685985565186, -0.254765003919601},
									{0.889303028583527, 0.35979500412941, -0.282290995121002},
									{0.780972003936768, 0.197036996483803, 0.592671990394592},
									{0.520120978355408, 0.506695985794067, 0.687556982040405},
									{0.403894990682602, 0.693961024284363, 0.59605997800827},
									{-0.154982998967171, 0.899236023426056, 0.409090012311935},
									{-0.65733802318573, 0.537168025970459, 0.528542995452881},
									{-0.746195018291473, 0.334091007709503, 0.57582700252533},
									{-0.624952018260956, -0.0491439998149872, 0.77911502122879},
									{0.318141013383865, -0.254714995622635, 0.913185000419617},
									{-0.555896997451782, 0.405294001102447, 0.725751996040344},
									{-0.794434010982513, 0.0994059965014458, 0.599160015583038},
									{-0.64036101102829, -0.689463019371033, 0.3384949862957},
									{-0.126712992787361, -0.734094977378845, 0.667119979858398},
									{0.105457000434399, -0.780816972255707, 0.615795016288757},
									{0.407992988824844, -0.480915993452072, 0.776054978370666},
									{0.69513601064682, -0.545120000839233, 0.468647003173828},
									{0.973191022872925, -0.00648899981752038, 0.229908004403114},
									{0.946893990039825, 0.31750899553299, -0.0507990010082722},
									{0.563583016395569, 0.825612008571625, 0.0271829999983311},
									{0.325773000717163, 0.945423007011414, 0.00694900006055832},
									{-0.171820998191834, 0.985096991062164, -0.00781499966979027},
									{-0.670440971851349, 0.739938974380493, 0.0547689981758594},
									{-0.822980999946594, 0.554961979389191, 0.121321998536587},
									{-0.96619302034378, 0.117857001721859, 0.229306995868683},
									{-0.953769028186798, -0.294703990221024, 0.0589450001716614},
									{-0.864386975765228, -0.50272798538208, -0.0100149996578693},
									{-0.530609011650085, -0.842006027698517, -0.0973659977316856},
									{-0.16261799633503, -0.984075009822845, 0.071772001683712},
									{0.081446997821331, -0.996011018753052, 0.0364390015602112},
									{0.745984017848968, -0.665962994098663, 0.000761999981477857},
									{0.942057013511658, -0.329268991947174, -0.0641060024499893},
									{0.939701974391937, -0.2810899913311, 0.19480299949646},
									{0.771214008331299, 0.550670027732849, 0.319362998008728},
									{0.641348004341126, 0.730690002441406, 0.234020993113518},
									{0.0806820020079613, 0.996690988540649, 0.00987899955362082},
									{-0.0467250011861324, 0.976643025875092, 0.209725007414818},
									{-0.531076014041901, 0.821000993251801, 0.209562003612518},
									{-0.695815026760101, 0.65599000453949, 0.292434990406036},
									{-0.97612202167511, 0.21670900285244, -0.0149130001664162},
									{-0.961660981178284, -0.144128993153572, 0.233313992619514},
									{-0.77208399772644, -0.613646984100342, 0.165298998355865},
									{-0.449600011110306, -0.836059987545013, 0.314426004886627},
									{-0.392699986696243, -0.914615988731384, 0.0962470024824142},
									{0.390588998794556, -0.919470012187958, 0.0448900014162064},
									{0.582529008388519, -0.799197971820831, 0.148127004504204},
									{0.866430997848511, -0.489811986684799, 0.0968639999628067},
									{0.904586970806122, 0.11149799823761, 0.411449998617172},
									{0.953536987304687, 0.232329994440079, 0.191806003451347},
									{0.497310996055603, 0.770802974700928, 0.398176997900009},
									{0.194066002964973, 0.956319987773895, 0.218611001968384},
									{0.422876000404358, 0.882275998592377, 0.206797003746033},
									{-0.373796999454498, 0.849565982818604, 0.372173994779587},
									{-0.534497022628784, 0.714022994041443, 0.452199995517731},
									{-0.881826996803284, 0.237159997224808, 0.407597988843918},
									{-0.904947996139526, -0.0140690002590418, 0.425289005041122},
									{-0.751827001571655, -0.512817025184631, 0.414458006620407},
									{-0.50101500749588, -0.697916984558105, 0.511758029460907},
									{-0.235190004110336, -0.925922989845276, 0.295554995536804},
									{0.228982999920845, -0.953939974308014, 0.193819001317024},
									{0.734025001525879, -0.634898006916046, 0.241062000393867},
									{0.913752973079681, -0.0632530003786087, -0.401315987110138},
									{0.905735015869141, -0.161486998200417, 0.391874998807907},
									{0.858929991722107, 0.342445999383926, 0.380748987197876},
									{0.624486029148102, 0.60758101940155, 0.490776985883713},
									{0.289263993501663, 0.857478976249695, 0.425507992506027},
									{0.0699680000543594, 0.902168989181519, 0.425671011209488},
									{-0.28617998957634, 0.940699994564056, 0.182164996862411},
									{-0.574012994766235, 0.805118978023529, -0.149308994412422},
									{0.111258000135422, 0.0997179970145225, -0.988776028156281},
									{-0.305393010377884, -0.944227993488312, -0.123159997165203},
									{-0.601166009902954, -0.78957599401474, 0.123162999749184},
									{-0.290645003318787, -0.812139987945557, 0.505918979644775},
									{-0.064920000731945, -0.877162992954254, 0.475784987211227},
									{0.408300995826721, -0.862215995788574, 0.299789011478424},
									{0.566097021102905, -0.725566029548645, 0.391263991594315},
									{0.839363992214203, -0.427386999130249, 0.335869014263153},
									{0.818899989128113, -0.0413050018250942, 0.572448015213013},
									{0.719784021377564, 0.414997011423111, 0.556496977806091},
									{0.881744027137756, 0.450269997119904, 0.140659004449844},
									{0.40182301402092, -0.898220002651215, -0.178151994943619},
									{-0.0540199987590313, 0.791343986988068, 0.608980000019074},
									{-0.293774008750916, 0.763993978500366, 0.574464976787567},
									{-0.450798004865646, 0.610346972942352, 0.651350975036621},
									{-0.638221025466919, 0.186693996191025, 0.746873021125793},
									{-0.872870028018951, -0.257126986980438, 0.414707988500595},
									{-0.587257027626038, -0.521709978580475, 0.618827998638153},
									{-0.353657990694046, -0.641973972320557, 0.680290997028351},
									{0.0416489988565445, -0.611272990703583, 0.79032301902771},
									{0.348342001438141, -0.779182970523834, 0.521086990833282},
									{0.499166995286942, -0.622440993785858, 0.602825999259949},
									{0.790018975734711, -0.3038310110569, 0.53250002861023},
									{0.660117983818054, 0.0607330016791821, 0.748701989650726},
									{0.604920983314514, 0.29416099190712, 0.739960014820099},
									{0.38569700717926, 0.379346013069153, 0.841032028198242},
									{0.239693000912666, 0.207875996828079, 0.948332011699677},
									{0.012622999958694, 0.258531987667084, 0.965919971466065},
									{-0.100556999444962, 0.457147002220154, 0.883687973022461},
									{0.0469669997692108, 0.628588020801544, 0.776319026947021},
									{-0.430391013622284, -0.445405006408691, 0.785097002983093},
									{-0.434291005134583, -0.196227997541428, 0.879139006137848},
									{-0.256637006998062, -0.33686700463295, 0.905902028083801},
									{-0.131372004747391, -0.158910006284714, 0.978514015674591},
									{0.102379001677036, -0.208766996860504, 0.972591996192932},
									{0.195686995983124, -0.450129002332687, 0.871258020401001},
									{0.627318978309631, -0.42314800620079, 0.653770983219147},
									{0.687439024448395, -0.171582996845245, 0.70568197965622},
									{0.275920003652573, -0.021254999563098, 0.960946023464203},
									{0.459367007017136, 0.157465994358063, 0.874177992343903},
									{0.285394996404648, 0.583184003829956, 0.760555982589722},
									{-0.812174022197723, 0.460303008556366, 0.358460992574692},
									{-0.189068004488945, 0.641223013401032, 0.743698000907898},
									{-0.338874995708466, 0.476480007171631, 0.811251997947693},
									{-0.920993983745575, 0.347185999155045, 0.176726996898651},
									{0.0406389981508255, 0.024465000256896, 0.998874008655548},
									{-0.739131987094879, -0.353747010231018, 0.573189973831177},
									{-0.603511989116669, -0.286615014076233, 0.744059979915619},
									{-0.188675999641418, -0.547058999538422, 0.815554022789001},
									{-0.0260450001806021, -0.397819995880127, 0.917093992233276},
									{0.267897009849548, -0.649040997028351, 0.712023019790649},
									{0.518245995044708, -0.28489100933075, 0.806385993957519},
									{0.493450999259949, -0.0665329992771149, 0.867224991321564},
									{-0.328188002109528, 0.140250995755196, 0.934143006801605},
									{-0.328188002109528, 0.140250995755196, 0.934143006801605},
									{-0.328188002109528, 0.140250995755196, 0.934143006801605},
									{-0.328188002109528, 0.140250995755196, 0.934143006801605}};
} // namespace priv

static inline core::RGBA toRGBA(const glm::vec3 &normal) {
	// Map the normal components back to [0, 1] range
	const float rf = (normal.x + 1.0f) / 2.0f; // X component to [0, 1]
	const float gf = (normal.y + 1.0f) / 2.0f; // Y component to [0, 1]
	const float bf = (normal.z + 1.0f) / 2.0f; // Z component to [0, 1]

	// Convert to [0, 255] for RGB
	const uint8_t r = (uint8_t)(rf * 255.0f);
	const uint8_t g = (uint8_t)(gf * 255.0f);
	const uint8_t b = (uint8_t)(bf * 255.0f);
	return core::RGBA(r, g, b);
}

static inline glm::vec3 toVec3(const core::RGBA &rgba) {
	// Normalize RGB values to the range [0, 1]
	const float r = rgba.r / 255.0f;
	const float g = rgba.g / 255.0f;
	const float b = rgba.b / 255.0f;

	// Map to the correct range [-1, 1] for X, Y, and Z
	const float nx = 2.0f * r - 1.0f;
	const float ny = 2.0f * g - 1.0f;
	const float nz = 2.0f * b - 1.0f;

	return glm::vec3(nx, ny, nz);
}

uint8_t NormalPalette::getClosestMatch(const glm::vec3 &normal) const {
	uint8_t closestIndex = 0;
	float maxDot = -1.0f;

	for (size_t i = 0; i < _size; ++i) {
		const float dot = glm::dot(normal, toVec3(_normals[i]));

		if (dot > maxDot) {
			maxDot = dot;
			closestIndex = i;
		}
	}
	return closestIndex;
}

void NormalPalette::setNormal(uint8_t index, const glm::vec3 &normal) {
	_normals[index] = toRGBA(normal);
	_size = core_max(index, _size);
}

void NormalPalette::loadNormalMap(const glm::vec3 *normals, uint8_t size) {
	for (uint8_t i = 0; i < size; i++) {
		_normals[i] = toRGBA(normals[i]);
	}
	_size = size;
}

void NormalPalette::loadNormalMap(const core::RGBA *normals, uint8_t size) {
	for (uint8_t i = 0; i < size; i++) {
		_normals[i] = normals[i];
	}
	_size = size;
}

void NormalPalette::tiberianSun() {
	loadNormalMap(priv::tsnormals, (uint8_t)lengthof(priv::tsnormals));
}

void NormalPalette::redAlert2() {
	loadNormalMap(priv::ra2normals, (uint8_t)lengthof(priv::ra2normals));
}

void NormalPalette::markDirty() {
	core::DirtyState::markDirty();
	_hash = core::hash(_normals, sizeof(_normals));
}

bool NormalPalette::load(const char *paletteName) {
	if (paletteName == nullptr || paletteName[0] == '\0') {
		return false;
	}

	// this is handled in the scene manager it is just ignored here
	if (SDL_strncmp(paletteName, "node:", 5) == 0) {
		if (_size == 0) {
			redAlert2();
		}
		_name = paletteName + 5;
		return false;
	}

	if (SDL_strcmp(paletteName, builtIn[0]) == 0) {
		redAlert2();
		return true;
	} else if (SDL_strcmp(paletteName, builtIn[1]) == 0) {
		tiberianSun();
		return true;
	}
	static_assert(lengthof(builtIn) == 2, "Unexpected amount of built-in palettes");

	const io::FilesystemPtr &filesystem = io::filesystem();
	io::FilePtr paletteFile = filesystem->open(paletteName);
	if (!paletteFile->validHandle()) {
		paletteFile = filesystem->open(core::string::format("normals-%s.png", paletteName));
		if (!paletteFile->validHandle()) {
			Log::error("Failed to load normal palette file %s", paletteName);
			return false;
		}
	}
	io::FileStream stream(paletteFile);
	if (!stream.valid()) {
		Log::error("Failed to load image %s", paletteFile->name().c_str());
		return false;
	}

	palette::Palette paletteToLoad;
	if (!palette::loadPalette(paletteFile->name(), stream, paletteToLoad)) {
		const image::ImagePtr &img = image::loadImage(paletteFile);
		if (!img->isLoaded()) {
			Log::error("Failed to load image %s", paletteFile->name().c_str());
			return false;
		}
		return load(img);
	}
	_size = paletteToLoad.colorCount();
	for (uint8_t i = 0; i < _size; ++i) {
		_normals[i] = paletteToLoad.color(i);
	}
	return true;
}

bool NormalPalette::load(const image::ImagePtr &img) {
	if (img->depth() != 4) {
		Log::warn("Palette image has invalid depth (expected: 4bpp, got %i)", img->depth());
		return false;
	}
	if (img->width() * img->height() > NormalPaletteMaxNormals) {
		Log::warn("Palette image has invalid dimensions - we need max 256x1");
		return false;
	}
	int ncolors = img->width();
	if (ncolors > PaletteMaxColors) {
		ncolors = PaletteMaxColors;
		Log::warn("Palette image has invalid dimensions - we need max 256x1(depth: 4)");
	}
	_size = ncolors;
	for (int i = 0; i < _size; ++i) {
		_normals[i] = img->colorAt(i, 0);
	}
	for (int i = _size; i < NormalPaletteMaxNormals; ++i) {
		_normals[i] = core::RGBA(0);
	}
	_name = img->name();
	markDirty();
	Log::debug("Set up %i normals", _size);
	return true;
}

bool NormalPalette::save(const char *name) const {
	if (name == nullptr || name[0] == '\0') {
		if (_name.empty()) {
			Log::error("No name given to save the current palette");
			return false;
		}
		name = _name.c_str();
	}
	const core::String ext = core::string::extractExtension(name);
	if (ext.empty()) {
		Log::error("No extension found for %s - can't determine the palette format", name);
		return false;
	}
	const io::FilePtr &file = io::filesystem()->open(name, io::FileMode::SysWrite);
	io::FileStream stream(file);
	if (!stream.valid()) {
		Log::error("Failed to open file %s for writing", name);
		return false;
	}
	palette::Palette palForSave;
	palForSave.setSize(_size);
	for (uint8_t i = 0; i < _size; i++) {
		palForSave.setColor(i, _normals[i]);
	}
	return palette::savePalette(palForSave, name, stream);
}

} // namespace palette
