#ifndef _flextvk_h_
#define _flextvk_h_
/*
    This file was generated using https://github.com/mosra/flextgl:

        path/to/flextGLgen.py -T vulkan-dynamic -D /home/mgerhardy/dev/engine/src/modules/video/vk profiles/vulkan.txt

    Do not edit directly, modify the template or profile and regenerate.
*/

#include <stdint.h>
#include <stddef.h>

/* Defensive include guards */

#if defined(VULKAN_H_)
#error Attempt to include auto-generated header after including vulkan.h
#endif
#if defined(VK_PLATFORM_H_)
#error Attempt to include auto-generated header after including vk_platform.h
#endif

#define VULKAN_H_
#define VK_PLATFORM_H_

#ifdef __cplusplus
extern "C" {
#endif

/* Verbatim copied from upstream vk_platform.h */
#if defined(_WIN32)
    // On Windows, Vulkan commands use the stdcall convention
    #define VKAPI_ATTR
    #define VKAPI_CALL __stdcall
    #define VKAPI_PTR  VKAPI_CALL
#elif defined(__ANDROID__) && defined(__ARM_ARCH) && __ARM_ARCH < 7
    #error "Vulkan isn't supported for the 'armeabi' NDK ABI"
#elif defined(__ANDROID__) && defined(__ARM_ARCH) && __ARM_ARCH >= 7 && defined(__ARM_32BIT_STATE)
    // On Android 32-bit ARM targets, Vulkan functions use the "hardfloat"
    // calling convention, i.e. float parameters are passed in registers. This
    // is true even if the rest of the application passes floats on the stack,
    // as it does by default when compiling for the armeabi-v7a NDK ABI.
    #define VKAPI_ATTR __attribute__((pcs("aapcs-vfp")))
    #define VKAPI_CALL
    #define VKAPI_PTR  VKAPI_ATTR
#else
    // On other platforms, use the default calling convention
    #define VKAPI_ATTR
    #define VKAPI_CALL
    #define VKAPI_PTR
#endif

/* Enums */

#define VK_MAX_PHYSICAL_DEVICE_NAME_SIZE 256
#define VK_UUID_SIZE 16
#define VK_MAX_EXTENSION_NAME_SIZE 256
#define VK_MAX_DESCRIPTION_SIZE 256
#define VK_MAX_MEMORY_TYPES 32
#define VK_MAX_MEMORY_HEAPS 16
#define VK_MAX_DEVICE_GROUP_SIZE 32

/* VK_VERSION_1_0 */

#define VK_ATTACHMENT_UNUSED (~0U)
#define VK_FALSE 0
#define VK_LOD_CLAMP_NONE 1000.0F
#define VK_QUEUE_FAMILY_IGNORED (~0U)
#define VK_REMAINING_ARRAY_LAYERS (~0U)
#define VK_REMAINING_MIP_LEVELS (~0U)
#define VK_SUBPASS_EXTERNAL (~0U)
#define VK_TRUE 1
#define VK_WHOLE_SIZE (~0ULL)
#define VK_MAX_MEMORY_TYPES 32
#define VK_MAX_PHYSICAL_DEVICE_NAME_SIZE 256
#define VK_UUID_SIZE 16
#define VK_MAX_EXTENSION_NAME_SIZE 256
#define VK_MAX_DESCRIPTION_SIZE 256
#define VK_MAX_MEMORY_HEAPS 16

/* VK_KHR_surface */

#define VK_KHR_SURFACE_SPEC_VERSION 25
#define VK_KHR_SURFACE_EXTENSION_NAME "VK_KHR_surface"

/* VK_KHR_swapchain */

#define VK_KHR_SWAPCHAIN_SPEC_VERSION 70
#define VK_KHR_SWAPCHAIN_EXTENSION_NAME "VK_KHR_swapchain"

/* VK_EXT_debug_report */

#define VK_EXT_DEBUG_REPORT_SPEC_VERSION 10
#define VK_EXT_DEBUG_REPORT_EXTENSION_NAME "VK_EXT_debug_report"

/* Data types */

// DEPRECATED: This define is deprecated. VK_MAKE_API_VERSION should be used instead.
#define VK_MAKE_VERSION(major, minor, patch) \
    ((((uint32_t)(major)) << 22) | (((uint32_t)(minor)) << 12) | ((uint32_t)(patch)))
// DEPRECATED: This define is deprecated. VK_API_VERSION_MAJOR should be used instead.
#define VK_VERSION_MAJOR(version) ((uint32_t)(version) >> 22)
// DEPRECATED: This define is deprecated. VK_API_VERSION_MINOR should be used instead.
#define VK_VERSION_MINOR(version) (((uint32_t)(version) >> 12) & 0x3FFU)
// DEPRECATED: This define is deprecated. VK_API_VERSION_PATCH should be used instead.
#define VK_VERSION_PATCH(version) ((uint32_t)(version) & 0xFFFU)
#define VK_MAKE_API_VERSION(variant, major, minor, patch) \
    ((((uint32_t)(variant)) << 29) | (((uint32_t)(major)) << 22) | (((uint32_t)(minor)) << 12) | ((uint32_t)(patch)))
#define VK_API_VERSION_VARIANT(version) ((uint32_t)(version) >> 29)
#define VK_API_VERSION_MAJOR(version) (((uint32_t)(version) >> 22) & 0x7FU)
#define VK_API_VERSION_MINOR(version) (((uint32_t)(version) >> 12) & 0x3FFU)
#define VK_API_VERSION_PATCH(version) ((uint32_t)(version) & 0xFFFU)
// Vulkan 1.0 version number
#define VK_API_VERSION_1_0 VK_MAKE_API_VERSION(0, 1, 0, 0)// Patch version should always be set to 0
// Version of this file
#define VK_HEADER_VERSION 238
// Complete version of this file
#define VK_HEADER_VERSION_COMPLETE VK_MAKE_API_VERSION(0, 1, 3, VK_HEADER_VERSION)
#define VK_DEFINE_HANDLE(object) typedef struct object##_T* object;
#ifndef VK_USE_64_BIT_PTR_DEFINES
    #if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__) ) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)
        #define VK_USE_64_BIT_PTR_DEFINES 1
    #else
        #define VK_USE_64_BIT_PTR_DEFINES 0
    #endif
#endif
#ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE
    #if (VK_USE_64_BIT_PTR_DEFINES==1)
        #if (defined(__cplusplus) && (__cplusplus >= 201103L)) || (defined(_MSVC_LANG) && (_MSVC_LANG >= 201103L))
            #define VK_NULL_HANDLE nullptr
        #else
            #define VK_NULL_HANDLE ((void*)0)
        #endif
    #else
        #define VK_NULL_HANDLE 0ULL
    #endif
#endif
#ifndef VK_NULL_HANDLE
    #define VK_NULL_HANDLE 0
#endif
#ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE
    #if (VK_USE_64_BIT_PTR_DEFINES==1)
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T *object;
    #else
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;
    #endif
#endif
typedef uint32_t VkSampleMask;
typedef uint32_t VkBool32;
typedef uint32_t VkFlags;
typedef uint64_t VkDeviceSize;
typedef VkFlags VkFramebufferCreateFlags;
typedef VkFlags VkQueryPoolCreateFlags;
typedef VkFlags VkRenderPassCreateFlags;
typedef VkFlags VkSamplerCreateFlags;
typedef VkFlags VkPipelineLayoutCreateFlags;
typedef VkFlags VkPipelineCacheCreateFlags;
typedef VkFlags VkPipelineDepthStencilStateCreateFlags;
typedef VkFlags VkPipelineDynamicStateCreateFlags;
typedef VkFlags VkPipelineColorBlendStateCreateFlags;
typedef VkFlags VkPipelineMultisampleStateCreateFlags;
typedef VkFlags VkPipelineRasterizationStateCreateFlags;
typedef VkFlags VkPipelineViewportStateCreateFlags;
typedef VkFlags VkPipelineTessellationStateCreateFlags;
typedef VkFlags VkPipelineInputAssemblyStateCreateFlags;
typedef VkFlags VkPipelineVertexInputStateCreateFlags;
typedef VkFlags VkPipelineShaderStageCreateFlags;
typedef VkFlags VkDescriptorSetLayoutCreateFlags;
typedef VkFlags VkBufferViewCreateFlags;
typedef VkFlags VkInstanceCreateFlags;
typedef VkFlags VkDeviceCreateFlags;
typedef VkFlags VkDeviceQueueCreateFlags;
typedef VkFlags VkQueueFlags;
typedef VkFlags VkMemoryPropertyFlags;
typedef VkFlags VkMemoryHeapFlags;
typedef VkFlags VkAccessFlags;
typedef VkFlags VkBufferUsageFlags;
typedef VkFlags VkBufferCreateFlags;
typedef VkFlags VkShaderStageFlags;
typedef VkFlags VkImageUsageFlags;
typedef VkFlags VkImageCreateFlags;
typedef VkFlags VkImageViewCreateFlags;
typedef VkFlags VkPipelineCreateFlags;
typedef VkFlags VkColorComponentFlags;
typedef VkFlags VkFenceCreateFlags;
typedef VkFlags VkSemaphoreCreateFlags;
typedef VkFlags VkFormatFeatureFlags;
typedef VkFlags VkQueryControlFlags;
typedef VkFlags VkQueryResultFlags;
typedef VkFlags VkShaderModuleCreateFlags;
typedef VkFlags VkEventCreateFlags;
typedef VkFlags VkCommandPoolCreateFlags;
typedef VkFlags VkCommandPoolResetFlags;
typedef VkFlags VkCommandBufferResetFlags;
typedef VkFlags VkCommandBufferUsageFlags;
typedef VkFlags VkQueryPipelineStatisticFlags;
typedef VkFlags VkMemoryMapFlags;
typedef VkFlags VkImageAspectFlags;
typedef VkFlags VkSparseMemoryBindFlags;
typedef VkFlags VkSparseImageFormatFlags;
typedef VkFlags VkSubpassDescriptionFlags;
typedef VkFlags VkPipelineStageFlags;
typedef VkFlags VkSampleCountFlags;
typedef VkFlags VkAttachmentDescriptionFlags;
typedef VkFlags VkStencilFaceFlags;
typedef VkFlags VkCullModeFlags;
typedef VkFlags VkDescriptorPoolCreateFlags;
typedef VkFlags VkDescriptorPoolResetFlags;
typedef VkFlags VkDependencyFlags;
typedef VkFlags VkCompositeAlphaFlagsKHR;
typedef VkFlags VkSurfaceTransformFlagsKHR;
typedef VkFlags VkSwapchainCreateFlagsKHR;
typedef VkFlags VkDeviceGroupPresentModeFlagsKHR;
typedef VkFlags VkDebugReportFlagsEXT;
VK_DEFINE_HANDLE(VkInstance)
VK_DEFINE_HANDLE(VkPhysicalDevice)
VK_DEFINE_HANDLE(VkDevice)
VK_DEFINE_HANDLE(VkQueue)
VK_DEFINE_HANDLE(VkCommandBuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeviceMemory)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCommandPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBufferView)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImage)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImageView)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkShaderModule)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipeline)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineLayout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSampler)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSet)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSetLayout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFence)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSemaphore)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkEvent)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkQueryPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFramebuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkRenderPass)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineCache)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSurfaceKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSwapchainKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugReportCallbackEXT)

typedef enum {
    VK_ATTACHMENT_LOAD_OP_LOAD = 0,
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2
} VkAttachmentLoadOp;

typedef enum {
    VK_ATTACHMENT_STORE_OP_STORE = 0,
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1
} VkAttachmentStoreOp;

typedef enum {
    VK_BLEND_FACTOR_ZERO = 0,
    VK_BLEND_FACTOR_ONE = 1,
    VK_BLEND_FACTOR_SRC_COLOR = 2,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
    VK_BLEND_FACTOR_DST_COLOR = 4,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
    VK_BLEND_FACTOR_SRC_ALPHA = 6,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
    VK_BLEND_FACTOR_DST_ALPHA = 8,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
    VK_BLEND_FACTOR_SRC1_COLOR = 15,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
    VK_BLEND_FACTOR_SRC1_ALPHA = 17,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
} VkBlendFactor;

typedef enum {
    VK_BLEND_OP_ADD = 0,
    VK_BLEND_OP_SUBTRACT = 1,
    VK_BLEND_OP_REVERSE_SUBTRACT = 2,
    VK_BLEND_OP_MIN = 3,
    VK_BLEND_OP_MAX = 4
} VkBlendOp;

typedef enum {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5
} VkBorderColor;

typedef int VkFramebufferCreateFlagBits;

typedef int VkRenderPassCreateFlagBits;

typedef int VkSamplerCreateFlagBits;

typedef enum {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1
} VkPipelineCacheHeaderVersion;

typedef int VkPipelineCacheCreateFlagBits;

typedef int VkPipelineShaderStageCreateFlagBits;

typedef int VkDescriptorSetLayoutCreateFlagBits;

typedef int VkInstanceCreateFlagBits;

typedef int VkDeviceQueueCreateFlagBits;

typedef enum {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1 << 0,
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 1 << 1,
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 1 << 2
} VkBufferCreateFlagBits;

typedef enum {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1 << 0,
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 1 << 1,
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 1 << 2,
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 1 << 3,
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 1 << 4,
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 1 << 5,
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 1 << 6,
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 1 << 7,
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 1 << 8
} VkBufferUsageFlagBits;

typedef enum {
    VK_COLOR_COMPONENT_R_BIT = 1 << 0,
    VK_COLOR_COMPONENT_G_BIT = 1 << 1,
    VK_COLOR_COMPONENT_B_BIT = 1 << 2,
    VK_COLOR_COMPONENT_A_BIT = 1 << 3
} VkColorComponentFlagBits;

typedef enum {
    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
    VK_COMPONENT_SWIZZLE_ZERO = 1,
    VK_COMPONENT_SWIZZLE_ONE = 2,
    VK_COMPONENT_SWIZZLE_R = 3,
    VK_COMPONENT_SWIZZLE_G = 4,
    VK_COMPONENT_SWIZZLE_B = 5,
    VK_COMPONENT_SWIZZLE_A = 6
} VkComponentSwizzle;

typedef enum {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1 << 0,
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 1 << 1
} VkCommandPoolCreateFlagBits;

typedef enum {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1 << 0
} VkCommandPoolResetFlagBits;

typedef enum {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1 << 0
} VkCommandBufferResetFlagBits;

typedef enum {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1
} VkCommandBufferLevel;

typedef enum {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1 << 0,
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 1 << 1,
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 1 << 2
} VkCommandBufferUsageFlagBits;

typedef enum {
    VK_COMPARE_OP_NEVER = 0,
    VK_COMPARE_OP_LESS = 1,
    VK_COMPARE_OP_EQUAL = 2,
    VK_COMPARE_OP_LESS_OR_EQUAL = 3,
    VK_COMPARE_OP_GREATER = 4,
    VK_COMPARE_OP_NOT_EQUAL = 5,
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
    VK_COMPARE_OP_ALWAYS = 7
} VkCompareOp;

typedef enum {
    VK_CULL_MODE_NONE = 0,
    VK_CULL_MODE_FRONT_BIT = 1 << 0,
    VK_CULL_MODE_BACK_BIT = 1 << 1,
    VK_CULL_MODE_FRONT_AND_BACK = 0x00000003
} VkCullModeFlagBits;

typedef enum {
    VK_DESCRIPTOR_TYPE_SAMPLER = 0,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
} VkDescriptorType;

typedef enum {
    VK_DYNAMIC_STATE_VIEWPORT = 0,
    VK_DYNAMIC_STATE_SCISSOR = 1,
    VK_DYNAMIC_STATE_LINE_WIDTH = 2,
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8
} VkDynamicState;

typedef enum {
    VK_FENCE_CREATE_SIGNALED_BIT = 1 << 0
} VkFenceCreateFlagBits;

typedef enum {
    VK_POLYGON_MODE_FILL = 0,
    VK_POLYGON_MODE_LINE = 1,
    VK_POLYGON_MODE_POINT = 2
} VkPolygonMode;

typedef enum {
    VK_FORMAT_UNDEFINED = 0,
    VK_FORMAT_R4G4_UNORM_PACK8 = 1,
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
    VK_FORMAT_R8_UNORM = 9,
    VK_FORMAT_R8_SNORM = 10,
    VK_FORMAT_R8_USCALED = 11,
    VK_FORMAT_R8_SSCALED = 12,
    VK_FORMAT_R8_UINT = 13,
    VK_FORMAT_R8_SINT = 14,
    VK_FORMAT_R8_SRGB = 15,
    VK_FORMAT_R8G8_UNORM = 16,
    VK_FORMAT_R8G8_SNORM = 17,
    VK_FORMAT_R8G8_USCALED = 18,
    VK_FORMAT_R8G8_SSCALED = 19,
    VK_FORMAT_R8G8_UINT = 20,
    VK_FORMAT_R8G8_SINT = 21,
    VK_FORMAT_R8G8_SRGB = 22,
    VK_FORMAT_R8G8B8_UNORM = 23,
    VK_FORMAT_R8G8B8_SNORM = 24,
    VK_FORMAT_R8G8B8_USCALED = 25,
    VK_FORMAT_R8G8B8_SSCALED = 26,
    VK_FORMAT_R8G8B8_UINT = 27,
    VK_FORMAT_R8G8B8_SINT = 28,
    VK_FORMAT_R8G8B8_SRGB = 29,
    VK_FORMAT_B8G8R8_UNORM = 30,
    VK_FORMAT_B8G8R8_SNORM = 31,
    VK_FORMAT_B8G8R8_USCALED = 32,
    VK_FORMAT_B8G8R8_SSCALED = 33,
    VK_FORMAT_B8G8R8_UINT = 34,
    VK_FORMAT_B8G8R8_SINT = 35,
    VK_FORMAT_B8G8R8_SRGB = 36,
    VK_FORMAT_R8G8B8A8_UNORM = 37,
    VK_FORMAT_R8G8B8A8_SNORM = 38,
    VK_FORMAT_R8G8B8A8_USCALED = 39,
    VK_FORMAT_R8G8B8A8_SSCALED = 40,
    VK_FORMAT_R8G8B8A8_UINT = 41,
    VK_FORMAT_R8G8B8A8_SINT = 42,
    VK_FORMAT_R8G8B8A8_SRGB = 43,
    VK_FORMAT_B8G8R8A8_UNORM = 44,
    VK_FORMAT_B8G8R8A8_SNORM = 45,
    VK_FORMAT_B8G8R8A8_USCALED = 46,
    VK_FORMAT_B8G8R8A8_SSCALED = 47,
    VK_FORMAT_B8G8R8A8_UINT = 48,
    VK_FORMAT_B8G8R8A8_SINT = 49,
    VK_FORMAT_B8G8R8A8_SRGB = 50,
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
    VK_FORMAT_R16_UNORM = 70,
    VK_FORMAT_R16_SNORM = 71,
    VK_FORMAT_R16_USCALED = 72,
    VK_FORMAT_R16_SSCALED = 73,
    VK_FORMAT_R16_UINT = 74,
    VK_FORMAT_R16_SINT = 75,
    VK_FORMAT_R16_SFLOAT = 76,
    VK_FORMAT_R16G16_UNORM = 77,
    VK_FORMAT_R16G16_SNORM = 78,
    VK_FORMAT_R16G16_USCALED = 79,
    VK_FORMAT_R16G16_SSCALED = 80,
    VK_FORMAT_R16G16_UINT = 81,
    VK_FORMAT_R16G16_SINT = 82,
    VK_FORMAT_R16G16_SFLOAT = 83,
    VK_FORMAT_R16G16B16_UNORM = 84,
    VK_FORMAT_R16G16B16_SNORM = 85,
    VK_FORMAT_R16G16B16_USCALED = 86,
    VK_FORMAT_R16G16B16_SSCALED = 87,
    VK_FORMAT_R16G16B16_UINT = 88,
    VK_FORMAT_R16G16B16_SINT = 89,
    VK_FORMAT_R16G16B16_SFLOAT = 90,
    VK_FORMAT_R16G16B16A16_UNORM = 91,
    VK_FORMAT_R16G16B16A16_SNORM = 92,
    VK_FORMAT_R16G16B16A16_USCALED = 93,
    VK_FORMAT_R16G16B16A16_SSCALED = 94,
    VK_FORMAT_R16G16B16A16_UINT = 95,
    VK_FORMAT_R16G16B16A16_SINT = 96,
    VK_FORMAT_R16G16B16A16_SFLOAT = 97,
    VK_FORMAT_R32_UINT = 98,
    VK_FORMAT_R32_SINT = 99,
    VK_FORMAT_R32_SFLOAT = 100,
    VK_FORMAT_R32G32_UINT = 101,
    VK_FORMAT_R32G32_SINT = 102,
    VK_FORMAT_R32G32_SFLOAT = 103,
    VK_FORMAT_R32G32B32_UINT = 104,
    VK_FORMAT_R32G32B32_SINT = 105,
    VK_FORMAT_R32G32B32_SFLOAT = 106,
    VK_FORMAT_R32G32B32A32_UINT = 107,
    VK_FORMAT_R32G32B32A32_SINT = 108,
    VK_FORMAT_R32G32B32A32_SFLOAT = 109,
    VK_FORMAT_R64_UINT = 110,
    VK_FORMAT_R64_SINT = 111,
    VK_FORMAT_R64_SFLOAT = 112,
    VK_FORMAT_R64G64_UINT = 113,
    VK_FORMAT_R64G64_SINT = 114,
    VK_FORMAT_R64G64_SFLOAT = 115,
    VK_FORMAT_R64G64B64_UINT = 116,
    VK_FORMAT_R64G64B64_SINT = 117,
    VK_FORMAT_R64G64B64_SFLOAT = 118,
    VK_FORMAT_R64G64B64A64_UINT = 119,
    VK_FORMAT_R64G64B64A64_SINT = 120,
    VK_FORMAT_R64G64B64A64_SFLOAT = 121,
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
    VK_FORMAT_D16_UNORM = 124,
    VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
    VK_FORMAT_D32_SFLOAT = 126,
    VK_FORMAT_S8_UINT = 127,
    VK_FORMAT_D16_UNORM_S8_UINT = 128,
    VK_FORMAT_D24_UNORM_S8_UINT = 129,
    VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
    VK_FORMAT_BC2_UNORM_BLOCK = 135,
    VK_FORMAT_BC2_SRGB_BLOCK = 136,
    VK_FORMAT_BC3_UNORM_BLOCK = 137,
    VK_FORMAT_BC3_SRGB_BLOCK = 138,
    VK_FORMAT_BC4_UNORM_BLOCK = 139,
    VK_FORMAT_BC4_SNORM_BLOCK = 140,
    VK_FORMAT_BC5_UNORM_BLOCK = 141,
    VK_FORMAT_BC5_SNORM_BLOCK = 142,
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
    VK_FORMAT_BC7_UNORM_BLOCK = 145,
    VK_FORMAT_BC7_SRGB_BLOCK = 146,
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184
} VkFormat;

typedef enum {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1 << 0,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 1 << 1,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 1 << 2,
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 1 << 3,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 1 << 4,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 1 << 5,
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 1 << 6,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 1 << 7,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 1 << 8,
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 1 << 9,
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1 << 10,
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 1 << 11,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 1 << 12
} VkFormatFeatureFlagBits;

typedef enum {
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    VK_FRONT_FACE_CLOCKWISE = 1
} VkFrontFace;

typedef enum {
    VK_IMAGE_ASPECT_COLOR_BIT = 1 << 0,
    VK_IMAGE_ASPECT_DEPTH_BIT = 1 << 1,
    VK_IMAGE_ASPECT_STENCIL_BIT = 1 << 2,
    VK_IMAGE_ASPECT_METADATA_BIT = 1 << 3
} VkImageAspectFlagBits;

typedef enum {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1 << 0,
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 1 << 1,
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 1 << 2,
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 1 << 3,
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 1 << 4
} VkImageCreateFlagBits;

typedef enum {
    VK_IMAGE_LAYOUT_UNDEFINED = 0,
    VK_IMAGE_LAYOUT_GENERAL = 1,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
} VkImageLayout;

typedef enum {
    VK_IMAGE_TILING_OPTIMAL = 0,
    VK_IMAGE_TILING_LINEAR = 1
} VkImageTiling;

typedef enum {
    VK_IMAGE_TYPE_1D = 0,
    VK_IMAGE_TYPE_2D = 1,
    VK_IMAGE_TYPE_3D = 2
} VkImageType;

typedef enum {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1 << 0,
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 1 << 1,
    VK_IMAGE_USAGE_SAMPLED_BIT = 1 << 2,
    VK_IMAGE_USAGE_STORAGE_BIT = 1 << 3,
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 1 << 4,
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 1 << 5,
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 1 << 6,
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 1 << 7
} VkImageUsageFlagBits;

typedef int VkImageViewCreateFlagBits;

typedef enum {
    VK_IMAGE_VIEW_TYPE_1D = 0,
    VK_IMAGE_VIEW_TYPE_2D = 1,
    VK_IMAGE_VIEW_TYPE_3D = 2,
    VK_IMAGE_VIEW_TYPE_CUBE = 3,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
} VkImageViewType;

typedef enum {
    VK_SHARING_MODE_EXCLUSIVE = 0,
    VK_SHARING_MODE_CONCURRENT = 1
} VkSharingMode;

typedef enum {
    VK_INDEX_TYPE_UINT16 = 0,
    VK_INDEX_TYPE_UINT32 = 1
} VkIndexType;

typedef enum {
    VK_LOGIC_OP_CLEAR = 0,
    VK_LOGIC_OP_AND = 1,
    VK_LOGIC_OP_AND_REVERSE = 2,
    VK_LOGIC_OP_COPY = 3,
    VK_LOGIC_OP_AND_INVERTED = 4,
    VK_LOGIC_OP_NO_OP = 5,
    VK_LOGIC_OP_XOR = 6,
    VK_LOGIC_OP_OR = 7,
    VK_LOGIC_OP_NOR = 8,
    VK_LOGIC_OP_EQUIVALENT = 9,
    VK_LOGIC_OP_INVERT = 10,
    VK_LOGIC_OP_OR_REVERSE = 11,
    VK_LOGIC_OP_COPY_INVERTED = 12,
    VK_LOGIC_OP_OR_INVERTED = 13,
    VK_LOGIC_OP_NAND = 14,
    VK_LOGIC_OP_SET = 15
} VkLogicOp;

typedef enum {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1 << 0
} VkMemoryHeapFlagBits;

typedef enum {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1 << 0,
    VK_ACCESS_INDEX_READ_BIT = 1 << 1,
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 1 << 2,
    VK_ACCESS_UNIFORM_READ_BIT = 1 << 3,
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 1 << 4,
    VK_ACCESS_SHADER_READ_BIT = 1 << 5,
    VK_ACCESS_SHADER_WRITE_BIT = 1 << 6,
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 1 << 7,
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 1 << 8,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 1 << 9,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1 << 10,
    VK_ACCESS_TRANSFER_READ_BIT = 1 << 11,
    VK_ACCESS_TRANSFER_WRITE_BIT = 1 << 12,
    VK_ACCESS_HOST_READ_BIT = 1 << 13,
    VK_ACCESS_HOST_WRITE_BIT = 1 << 14,
    VK_ACCESS_MEMORY_READ_BIT = 1 << 15,
    VK_ACCESS_MEMORY_WRITE_BIT = 1 << 16
} VkAccessFlagBits;

typedef enum {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1 << 0,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 1 << 1,
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 1 << 2,
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 1 << 3,
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 1 << 4
} VkMemoryPropertyFlagBits;

typedef enum {
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4
} VkPhysicalDeviceType;

typedef enum {
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
    VK_PIPELINE_BIND_POINT_COMPUTE = 1
} VkPipelineBindPoint;

typedef enum {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1 << 0,
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 1 << 1,
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 1 << 2
} VkPipelineCreateFlagBits;

typedef enum {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
} VkPrimitiveTopology;

typedef enum {
    VK_QUERY_CONTROL_PRECISE_BIT = 1 << 0
} VkQueryControlFlagBits;

typedef enum {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1 << 0,
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 1 << 1,
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 1 << 2,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 1 << 3,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 1 << 4,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 1 << 5,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 1 << 6,
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 1 << 7,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 1 << 8,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 1 << 9,
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1 << 10
} VkQueryPipelineStatisticFlagBits;

typedef enum {
    VK_QUERY_RESULT_64_BIT = 1 << 0,
    VK_QUERY_RESULT_WAIT_BIT = 1 << 1,
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 1 << 2,
    VK_QUERY_RESULT_PARTIAL_BIT = 1 << 3
} VkQueryResultFlagBits;

typedef enum {
    VK_QUERY_TYPE_OCCLUSION = 0,
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
    VK_QUERY_TYPE_TIMESTAMP = 2
} VkQueryType;

typedef enum {
    VK_QUEUE_GRAPHICS_BIT = 1 << 0,
    VK_QUEUE_COMPUTE_BIT = 1 << 1,
    VK_QUEUE_TRANSFER_BIT = 1 << 2,
    VK_QUEUE_SPARSE_BINDING_BIT = 1 << 3
} VkQueueFlagBits;

typedef enum {
    VK_SUBPASS_CONTENTS_INLINE = 0,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
} VkSubpassContents;

typedef enum {
    VK_SUCCESS = 0,
    VK_NOT_READY = 1,
    VK_TIMEOUT = 2,
    VK_EVENT_SET = 3,
    VK_EVENT_RESET = 4,
    VK_INCOMPLETE = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
    VK_ERROR_INITIALIZATION_FAILED = -3,
    VK_ERROR_DEVICE_LOST = -4,
    VK_ERROR_MEMORY_MAP_FAILED = -5,
    VK_ERROR_LAYER_NOT_PRESENT = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT = -7,
    VK_ERROR_FEATURE_NOT_PRESENT = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER = -9,
    VK_ERROR_TOO_MANY_OBJECTS = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
    VK_ERROR_FRAGMENTED_POOL = -12,
    VK_ERROR_UNKNOWN = -13,
    VK_ERROR_SURFACE_LOST_KHR = -1000000000,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    VK_SUBOPTIMAL_KHR = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001
} VkResult;

typedef enum {
    VK_SHADER_STAGE_VERTEX_BIT = 1 << 0,
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 1 << 1,
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 1 << 2,
    VK_SHADER_STAGE_GEOMETRY_BIT = 1 << 3,
    VK_SHADER_STAGE_FRAGMENT_BIT = 1 << 4,
    VK_SHADER_STAGE_COMPUTE_BIT = 1 << 5,
    VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
    VK_SHADER_STAGE_ALL = 0x7FFFFFFF
} VkShaderStageFlagBits;

typedef enum {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1 << 0
} VkSparseMemoryBindFlagBits;

typedef enum {
    VK_STENCIL_FACE_FRONT_BIT = 1 << 0,
    VK_STENCIL_FACE_BACK_BIT = 1 << 1,
    VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
    VK_STENCIL_FRONT_AND_BACK = VK_STENCIL_FACE_FRONT_AND_BACK
} VkStencilFaceFlagBits;

typedef enum {
    VK_STENCIL_OP_KEEP = 0,
    VK_STENCIL_OP_ZERO = 1,
    VK_STENCIL_OP_REPLACE = 2,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    VK_STENCIL_OP_INVERT = 5,
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7
} VkStencilOp;

typedef enum {
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT
} VkStructureType;

typedef enum {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
} VkSystemAllocationScope;

typedef enum {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0
} VkInternalAllocationType;

typedef enum {
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
} VkSamplerAddressMode;

typedef enum {
    VK_FILTER_NEAREST = 0,
    VK_FILTER_LINEAR = 1
} VkFilter;

typedef enum {
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1
} VkSamplerMipmapMode;

typedef enum {
    VK_VERTEX_INPUT_RATE_VERTEX = 0,
    VK_VERTEX_INPUT_RATE_INSTANCE = 1
} VkVertexInputRate;

typedef enum {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1 << 0,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 1 << 1,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 1 << 2,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 1 << 3,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 1 << 4,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 1 << 5,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 1 << 6,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 1 << 7,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 1 << 8,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 1 << 9,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1 << 10,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 1 << 11,
    VK_PIPELINE_STAGE_TRANSFER_BIT = 1 << 12,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 1 << 13,
    VK_PIPELINE_STAGE_HOST_BIT = 1 << 14,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 1 << 15,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 1 << 16
} VkPipelineStageFlagBits;

typedef enum {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1 << 0,
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 1 << 1,
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 1 << 2
} VkSparseImageFormatFlagBits;

typedef enum {
    VK_SAMPLE_COUNT_1_BIT = 1 << 0,
    VK_SAMPLE_COUNT_2_BIT = 1 << 1,
    VK_SAMPLE_COUNT_4_BIT = 1 << 2,
    VK_SAMPLE_COUNT_8_BIT = 1 << 3,
    VK_SAMPLE_COUNT_16_BIT = 1 << 4,
    VK_SAMPLE_COUNT_32_BIT = 1 << 5,
    VK_SAMPLE_COUNT_64_BIT = 1 << 6
} VkSampleCountFlagBits;

typedef enum {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1 << 0
} VkAttachmentDescriptionFlagBits;

typedef enum {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1 << 0
} VkDescriptorPoolCreateFlagBits;

typedef enum {
    VK_DEPENDENCY_BY_REGION_BIT = 1 << 0
} VkDependencyFlagBits;

typedef int VkEventCreateFlagBits;

typedef int VkPipelineLayoutCreateFlagBits;

typedef int VkSubpassDescriptionFlagBits;

typedef int VkPipelineDepthStencilStateCreateFlagBits;

typedef int VkPipelineColorBlendStateCreateFlagBits;

typedef enum {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
    VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
} VkColorSpaceKHR;

typedef enum {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1 << 0,
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 1 << 1,
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 1 << 2,
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 1 << 3
} VkCompositeAlphaFlagBitsKHR;

typedef enum {
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
    VK_PRESENT_MODE_MAILBOX_KHR = 1,
    VK_PRESENT_MODE_FIFO_KHR = 2,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3
} VkPresentModeKHR;

typedef enum {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1 << 0,
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 1 << 1,
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 1 << 2,
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 1 << 3,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 1 << 4,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 1 << 5,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 1 << 6,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 1 << 7,
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 1 << 8
} VkSurfaceTransformFlagBitsKHR;

typedef enum {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1 << 0,
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 1 << 1,
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 1 << 2,
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 1 << 3,
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 1 << 4
} VkDebugReportFlagBitsEXT;

typedef enum {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000
} VkDebugReportObjectTypeEXT;

typedef enum {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1 << 0,
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 1 << 1,
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 1 << 2,
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 1 << 3
} VkDeviceGroupPresentModeFlagBitsKHR;

typedef enum {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1 << 0,
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 1 << 1
} VkSwapchainCreateFlagBitsKHR;

typedef enum {
    VK_VENDOR_ID_VIV = 0x10001,
    VK_VENDOR_ID_VSI = 0x10002,
    VK_VENDOR_ID_KAZAN = 0x10003,
    VK_VENDOR_ID_CODEPLAY = 0x10004,
    VK_VENDOR_ID_MESA = 0x10005,
    VK_VENDOR_ID_POCL = 0x10006
} VkVendorId;
typedef void (VKAPI_PTR *PFN_vkInternalAllocationNotification)(
    void*                                       pUserData,
    size_t                                      size,
    VkInternalAllocationType                    allocationType,
    VkSystemAllocationScope                     allocationScope);
typedef void (VKAPI_PTR *PFN_vkInternalFreeNotification)(
    void*                                       pUserData,
    size_t                                      size,
    VkInternalAllocationType                    allocationType,
    VkSystemAllocationScope                     allocationScope);
typedef void* (VKAPI_PTR *PFN_vkReallocationFunction)(
    void*                                       pUserData,
    void*                                       pOriginal,
    size_t                                      size,
    size_t                                      alignment,
    VkSystemAllocationScope                     allocationScope);
typedef void* (VKAPI_PTR *PFN_vkAllocationFunction)(
    void*                                       pUserData,
    size_t                                      size,
    size_t                                      alignment,
    VkSystemAllocationScope                     allocationScope);
typedef void (VKAPI_PTR *PFN_vkFreeFunction)(
    void*                                       pUserData,
    void*                                       pMemory);
typedef void (VKAPI_PTR *PFN_vkVoidFunction)(void);
typedef VkBool32 (VKAPI_PTR *PFN_vkDebugReportCallbackEXT)(
    VkDebugReportFlagsEXT                       flags,
    VkDebugReportObjectTypeEXT                  objectType,
    uint64_t                                    object,
    size_t                                      location,
    int32_t                                     messageCode,
    const char*                                 pLayerPrefix,
    const char*                                 pMessage,
    void*                                       pUserData);

typedef struct VkBaseInStructure {
    VkStructureType sType;
    const struct VkBaseInStructure* pNext;
} VkBaseInStructure;

typedef struct VkOffset2D {
    int32_t        x;
    int32_t        y;
} VkOffset2D;

typedef struct VkOffset3D {
    int32_t        x;
    int32_t        y;
    int32_t        z;
} VkOffset3D;

typedef struct VkExtent2D {
    uint32_t        width;
    uint32_t        height;
} VkExtent2D;

typedef struct VkExtent3D {
    uint32_t        width;
    uint32_t        height;
    uint32_t        depth;
} VkExtent3D;

typedef struct VkViewport {
    float x;
    float y;
    float width;
    float height;
    float                       minDepth;
    float                       maxDepth;
} VkViewport;

typedef struct VkRect2D {
    VkOffset2D     offset;
    VkExtent2D     extent;
} VkRect2D;

typedef struct VkClearRect {
    VkRect2D       rect;
    uint32_t       baseArrayLayer;
    uint32_t       layerCount;
} VkClearRect;

typedef struct VkComponentMapping {
    VkComponentSwizzle r;
    VkComponentSwizzle g;
    VkComponentSwizzle b;
    VkComponentSwizzle a;
} VkComponentMapping;

typedef struct VkPhysicalDeviceLimits {
    uint32_t               maxImageDimension1D;
    uint32_t               maxImageDimension2D;
    uint32_t               maxImageDimension3D;
    uint32_t               maxImageDimensionCube;
    uint32_t               maxImageArrayLayers;
    uint32_t               maxTexelBufferElements;
    uint32_t               maxUniformBufferRange;
    uint32_t               maxStorageBufferRange;
    uint32_t               maxPushConstantsSize;
    uint32_t               maxMemoryAllocationCount;
    uint32_t               maxSamplerAllocationCount;
    VkDeviceSize           bufferImageGranularity;
    VkDeviceSize           sparseAddressSpaceSize;
    uint32_t               maxBoundDescriptorSets;
    uint32_t               maxPerStageDescriptorSamplers;
    uint32_t               maxPerStageDescriptorUniformBuffers;
    uint32_t               maxPerStageDescriptorStorageBuffers;
    uint32_t               maxPerStageDescriptorSampledImages;
    uint32_t               maxPerStageDescriptorStorageImages;
    uint32_t               maxPerStageDescriptorInputAttachments;
    uint32_t               maxPerStageResources;
    uint32_t               maxDescriptorSetSamplers;
    uint32_t               maxDescriptorSetUniformBuffers;
    uint32_t               maxDescriptorSetUniformBuffersDynamic;
    uint32_t               maxDescriptorSetStorageBuffers;
    uint32_t               maxDescriptorSetStorageBuffersDynamic;
    uint32_t               maxDescriptorSetSampledImages;
    uint32_t               maxDescriptorSetStorageImages;
    uint32_t               maxDescriptorSetInputAttachments;
    uint32_t               maxVertexInputAttributes;
    uint32_t               maxVertexInputBindings;
    uint32_t               maxVertexInputAttributeOffset;
    uint32_t               maxVertexInputBindingStride;
    uint32_t               maxVertexOutputComponents;
    uint32_t               maxTessellationGenerationLevel;
    uint32_t               maxTessellationPatchSize;
    uint32_t               maxTessellationControlPerVertexInputComponents;
    uint32_t               maxTessellationControlPerVertexOutputComponents;
    uint32_t               maxTessellationControlPerPatchOutputComponents;
    uint32_t               maxTessellationControlTotalOutputComponents;
    uint32_t               maxTessellationEvaluationInputComponents;
    uint32_t               maxTessellationEvaluationOutputComponents;
    uint32_t               maxGeometryShaderInvocations;
    uint32_t               maxGeometryInputComponents;
    uint32_t               maxGeometryOutputComponents;
    uint32_t               maxGeometryOutputVertices;
    uint32_t               maxGeometryTotalOutputComponents;
    uint32_t               maxFragmentInputComponents;
    uint32_t               maxFragmentOutputAttachments;
    uint32_t               maxFragmentDualSrcAttachments;
    uint32_t               maxFragmentCombinedOutputResources;
    uint32_t               maxComputeSharedMemorySize;
    uint32_t               maxComputeWorkGroupCount[3];
    uint32_t               maxComputeWorkGroupInvocations;
    uint32_t               maxComputeWorkGroupSize[3];
    uint32_t              subPixelPrecisionBits;
    uint32_t              subTexelPrecisionBits;
    uint32_t              mipmapPrecisionBits;
    uint32_t               maxDrawIndexedIndexValue;
    uint32_t               maxDrawIndirectCount;
    float                  maxSamplerLodBias;
    float                  maxSamplerAnisotropy;
    uint32_t               maxViewports;
    uint32_t               maxViewportDimensions[2];
    float                viewportBoundsRange[2];
    uint32_t              viewportSubPixelBits;
    size_t             minMemoryMapAlignment;
    VkDeviceSize       minTexelBufferOffsetAlignment;
    VkDeviceSize       minUniformBufferOffsetAlignment;
    VkDeviceSize       minStorageBufferOffsetAlignment;
    int32_t                minTexelOffset;
    uint32_t               maxTexelOffset;
    int32_t                minTexelGatherOffset;
    uint32_t               maxTexelGatherOffset;
    float                  minInterpolationOffset;
    float                  maxInterpolationOffset;
    uint32_t              subPixelInterpolationOffsetBits;
    uint32_t               maxFramebufferWidth;
    uint32_t               maxFramebufferHeight;
    uint32_t               maxFramebufferLayers;
    VkSampleCountFlags     framebufferColorSampleCounts;
    VkSampleCountFlags     framebufferDepthSampleCounts;
    VkSampleCountFlags     framebufferStencilSampleCounts;
    VkSampleCountFlags     framebufferNoAttachmentsSampleCounts;
    uint32_t               maxColorAttachments;
    VkSampleCountFlags     sampledImageColorSampleCounts;
    VkSampleCountFlags     sampledImageIntegerSampleCounts;
    VkSampleCountFlags     sampledImageDepthSampleCounts;
    VkSampleCountFlags     sampledImageStencilSampleCounts;
    VkSampleCountFlags     storageImageSampleCounts;
    uint32_t               maxSampleMaskWords;
    VkBool32           timestampComputeAndGraphics;
    float              timestampPeriod;
    uint32_t               maxClipDistances;
    uint32_t               maxCullDistances;
    uint32_t               maxCombinedClipAndCullDistances;
    uint32_t               discreteQueuePriorities;
    float                pointSizeRange[2];
    float                lineWidthRange[2];
    float              pointSizeGranularity;
    float              lineWidthGranularity;
    VkBool32           strictLines;
    VkBool32           standardSampleLocations;
    VkDeviceSize       optimalBufferCopyOffsetAlignment;
    VkDeviceSize       optimalBufferCopyRowPitchAlignment;
    VkDeviceSize       nonCoherentAtomSize;
} VkPhysicalDeviceLimits;

typedef struct VkPhysicalDeviceSparseProperties {
    VkBool32           residencyStandard2DBlockShape;
    VkBool32           residencyStandard2DMultisampleBlockShape;
    VkBool32           residencyStandard3DBlockShape;
    VkBool32           residencyAlignedMipSize;
    VkBool32           residencyNonResidentStrict;
} VkPhysicalDeviceSparseProperties;

typedef struct VkPhysicalDeviceProperties {
    uint32_t       apiVersion;
    uint32_t       driverVersion;
    uint32_t       vendorID;
    uint32_t       deviceID;
    VkPhysicalDeviceType deviceType;
    char           deviceName[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];
    uint8_t        pipelineCacheUUID[VK_UUID_SIZE];
    VkPhysicalDeviceLimits limits;
    VkPhysicalDeviceSparseProperties sparseProperties;
} VkPhysicalDeviceProperties;

typedef struct VkExtensionProperties {
    char            extensionName[VK_MAX_EXTENSION_NAME_SIZE];
    uint32_t        specVersion;
} VkExtensionProperties;

typedef struct VkLayerProperties {
    char            layerName[VK_MAX_EXTENSION_NAME_SIZE];
    uint32_t        specVersion;
    uint32_t        implementationVersion;
    char            description[VK_MAX_DESCRIPTION_SIZE];
} VkLayerProperties;

typedef struct VkApplicationInfo {
    VkStructureType sType;
    const void*     pNext;
    const char*     pApplicationName;
    uint32_t        applicationVersion;
    const char*     pEngineName;
    uint32_t        engineVersion;
    uint32_t        apiVersion;
} VkApplicationInfo;

typedef struct VkAllocationCallbacks {
    void*           pUserData;
    PFN_vkAllocationFunction   pfnAllocation;
    PFN_vkReallocationFunction pfnReallocation;
    PFN_vkFreeFunction    pfnFree;
    PFN_vkInternalAllocationNotification pfnInternalAllocation;
    PFN_vkInternalFreeNotification pfnInternalFree;
} VkAllocationCallbacks;

typedef struct VkDeviceQueueCreateInfo {
    VkStructureType sType;
    const void*     pNext;
    VkDeviceQueueCreateFlags    flags;
    uint32_t        queueFamilyIndex;
    uint32_t        queueCount;
    const float*    pQueuePriorities;
} VkDeviceQueueCreateInfo;

typedef struct VkPhysicalDeviceFeatures {
    VkBool32               robustBufferAccess;
    VkBool32               fullDrawIndexUint32;
    VkBool32               imageCubeArray;
    VkBool32               independentBlend;
    VkBool32               geometryShader;
    VkBool32               tessellationShader;
    VkBool32               sampleRateShading;
    VkBool32               dualSrcBlend;
    VkBool32               logicOp;
    VkBool32               multiDrawIndirect;
    VkBool32               drawIndirectFirstInstance;
    VkBool32               depthClamp;
    VkBool32               depthBiasClamp;
    VkBool32               fillModeNonSolid;
    VkBool32               depthBounds;
    VkBool32               wideLines;
    VkBool32               largePoints;
    VkBool32               alphaToOne;
    VkBool32               multiViewport;
    VkBool32               samplerAnisotropy;
    VkBool32               textureCompressionETC2;
    VkBool32               textureCompressionASTC_LDR;
    VkBool32               textureCompressionBC;
    VkBool32               occlusionQueryPrecise;
    VkBool32               pipelineStatisticsQuery;
    VkBool32               vertexPipelineStoresAndAtomics;
    VkBool32               fragmentStoresAndAtomics;
    VkBool32               shaderTessellationAndGeometryPointSize;
    VkBool32               shaderImageGatherExtended;
    VkBool32               shaderStorageImageExtendedFormats;
    VkBool32               shaderStorageImageMultisample;
    VkBool32               shaderStorageImageReadWithoutFormat;
    VkBool32               shaderStorageImageWriteWithoutFormat;
    VkBool32               shaderUniformBufferArrayDynamicIndexing;
    VkBool32               shaderSampledImageArrayDynamicIndexing;
    VkBool32               shaderStorageBufferArrayDynamicIndexing;
    VkBool32               shaderStorageImageArrayDynamicIndexing;
    VkBool32               shaderClipDistance;
    VkBool32               shaderCullDistance;
    VkBool32               shaderFloat64;
    VkBool32               shaderInt64;
    VkBool32               shaderInt16;
    VkBool32               shaderResourceResidency;
    VkBool32               shaderResourceMinLod;
    VkBool32               sparseBinding;
    VkBool32               sparseResidencyBuffer;
    VkBool32               sparseResidencyImage2D;
    VkBool32               sparseResidencyImage3D;
    VkBool32               sparseResidency2Samples;
    VkBool32               sparseResidency4Samples;
    VkBool32               sparseResidency8Samples;
    VkBool32               sparseResidency16Samples;
    VkBool32               sparseResidencyAliased;
    VkBool32               variableMultisampleRate;
    VkBool32               inheritedQueries;
} VkPhysicalDeviceFeatures;

typedef struct VkDeviceCreateInfo {
    VkStructureType sType;
    const void*     pNext;
    VkDeviceCreateFlags    flags;
    uint32_t        queueCreateInfoCount;
    const VkDeviceQueueCreateInfo* pQueueCreateInfos;
    uint32_t               enabledLayerCount;
    const char* const*      ppEnabledLayerNames;
    uint32_t               enabledExtensionCount;
    const char* const*      ppEnabledExtensionNames;
    const VkPhysicalDeviceFeatures* pEnabledFeatures;
} VkDeviceCreateInfo;

typedef struct VkInstanceCreateInfo {
    VkStructureType sType;
    const void*     pNext;
    VkInstanceCreateFlags  flags;
    const VkApplicationInfo* pApplicationInfo;
    uint32_t               enabledLayerCount;
    const char* const*      ppEnabledLayerNames;
    uint32_t               enabledExtensionCount;
    const char* const*      ppEnabledExtensionNames;
} VkInstanceCreateInfo;

typedef struct VkQueueFamilyProperties {
    VkQueueFlags           queueFlags;
    uint32_t               queueCount;
    uint32_t               timestampValidBits;
    VkExtent3D             minImageTransferGranularity;
} VkQueueFamilyProperties;

typedef struct VkMemoryHeap {
    VkDeviceSize           size;
    VkMemoryHeapFlags      flags;
} VkMemoryHeap;

typedef struct VkMemoryType {
    VkMemoryPropertyFlags  propertyFlags;
    uint32_t               heapIndex;
} VkMemoryType;

typedef struct VkPhysicalDeviceMemoryProperties {
    uint32_t               memoryTypeCount;
    VkMemoryType           memoryTypes[VK_MAX_MEMORY_TYPES];
    uint32_t               memoryHeapCount;
    VkMemoryHeap           memoryHeaps[VK_MAX_MEMORY_HEAPS];
} VkPhysicalDeviceMemoryProperties;

typedef struct VkMemoryAllocateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkDeviceSize           allocationSize;
    uint32_t               memoryTypeIndex;
} VkMemoryAllocateInfo;

typedef struct VkMemoryRequirements {
    VkDeviceSize           size;
    VkDeviceSize           alignment;
    uint32_t               memoryTypeBits;
} VkMemoryRequirements;

typedef struct VkSparseImageFormatProperties {
    VkImageAspectFlags       aspectMask;
    VkExtent3D                                imageGranularity;
    VkSparseImageFormatFlags flags;
} VkSparseImageFormatProperties;

typedef struct VkSparseImageMemoryRequirements {
    VkSparseImageFormatProperties formatProperties;
    uint32_t               imageMipTailFirstLod;
    VkDeviceSize           imageMipTailSize;
    VkDeviceSize           imageMipTailOffset;
    VkDeviceSize           imageMipTailStride;
} VkSparseImageMemoryRequirements;

typedef struct VkMappedMemoryRange {
    VkStructureType sType;
    const void*            pNext;
    VkDeviceMemory         memory;
    VkDeviceSize           offset;
    VkDeviceSize           size;
} VkMappedMemoryRange;

typedef struct VkFormatProperties {
    VkFormatFeatureFlags   linearTilingFeatures;
    VkFormatFeatureFlags   optimalTilingFeatures;
    VkFormatFeatureFlags   bufferFeatures;
} VkFormatProperties;

typedef struct VkImageFormatProperties {
    VkExtent3D             maxExtent;
    uint32_t               maxMipLevels;
    uint32_t               maxArrayLayers;
    VkSampleCountFlags     sampleCounts;
    VkDeviceSize           maxResourceSize;
} VkImageFormatProperties;

typedef struct VkDescriptorBufferInfo {
    VkBuffer               buffer;
    VkDeviceSize           offset;
    VkDeviceSize           range;
} VkDescriptorBufferInfo;

typedef struct VkDescriptorImageInfo {
    VkSampler       sampler;
    VkImageView     imageView;
    VkImageLayout   imageLayout;
} VkDescriptorImageInfo;

typedef struct VkWriteDescriptorSet {
    VkStructureType sType;
    const void*            pNext;
    VkDescriptorSet        dstSet;
    uint32_t               dstBinding;
    uint32_t               dstArrayElement;
    uint32_t               descriptorCount;
    VkDescriptorType       descriptorType;
    const VkDescriptorImageInfo* pImageInfo;
    const VkDescriptorBufferInfo* pBufferInfo;
    const VkBufferView*    pTexelBufferView;
} VkWriteDescriptorSet;

typedef struct VkCopyDescriptorSet {
    VkStructureType sType;
    const void*            pNext;
    VkDescriptorSet        srcSet;
    uint32_t               srcBinding;
    uint32_t               srcArrayElement;
    VkDescriptorSet        dstSet;
    uint32_t               dstBinding;
    uint32_t               dstArrayElement;
    uint32_t               descriptorCount;
} VkCopyDescriptorSet;

typedef struct VkBufferCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkBufferCreateFlags    flags;
    VkDeviceSize           size;
    VkBufferUsageFlags     usage;
    VkSharingMode          sharingMode;
    uint32_t               queueFamilyIndexCount;
    const uint32_t*        pQueueFamilyIndices;
} VkBufferCreateInfo;

typedef struct VkBufferViewCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkBufferViewCreateFlags flags;
    VkBuffer               buffer;
    VkFormat               format;
    VkDeviceSize           offset;
    VkDeviceSize           range;
} VkBufferViewCreateInfo;

typedef struct VkImageSubresource {
    VkImageAspectFlags     aspectMask;
    uint32_t               mipLevel;
    uint32_t               arrayLayer;
} VkImageSubresource;

typedef struct VkImageSubresourceLayers {
    VkImageAspectFlags     aspectMask;
    uint32_t               mipLevel;
    uint32_t               baseArrayLayer;
    uint32_t               layerCount;
} VkImageSubresourceLayers;

typedef struct VkImageSubresourceRange {
    VkImageAspectFlags     aspectMask;
    uint32_t               baseMipLevel;
    uint32_t               levelCount;
    uint32_t               baseArrayLayer;
    uint32_t               layerCount;
} VkImageSubresourceRange;

typedef struct VkMemoryBarrier {
    VkStructureType sType;
    const void*            pNext;
    VkAccessFlags          srcAccessMask;
    VkAccessFlags          dstAccessMask;
} VkMemoryBarrier;

typedef struct VkBufferMemoryBarrier {
    VkStructureType sType;
    const void*            pNext;
    VkAccessFlags          srcAccessMask;
    VkAccessFlags          dstAccessMask;
    uint32_t               srcQueueFamilyIndex;
    uint32_t               dstQueueFamilyIndex;
    VkBuffer               buffer;
    VkDeviceSize           offset;
    VkDeviceSize           size;
} VkBufferMemoryBarrier;

typedef struct VkImageMemoryBarrier {
    VkStructureType sType;
    const void*            pNext;
    VkAccessFlags          srcAccessMask;
    VkAccessFlags          dstAccessMask;
    VkImageLayout          oldLayout;
    VkImageLayout          newLayout;
    uint32_t               srcQueueFamilyIndex;
    uint32_t               dstQueueFamilyIndex;
    VkImage                image;
    VkImageSubresourceRange subresourceRange;
} VkImageMemoryBarrier;

typedef struct VkImageCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkImageCreateFlags     flags;
    VkImageType            imageType;
    VkFormat               format;
    VkExtent3D             extent;
    uint32_t               mipLevels;
    uint32_t               arrayLayers;
    VkSampleCountFlagBits  samples;
    VkImageTiling          tiling;
    VkImageUsageFlags      usage;
    VkSharingMode          sharingMode;
    uint32_t               queueFamilyIndexCount;
    const uint32_t*        pQueueFamilyIndices;
    VkImageLayout          initialLayout;
} VkImageCreateInfo;

typedef struct VkSubresourceLayout {
    VkDeviceSize           offset;
    VkDeviceSize           size;
    VkDeviceSize           rowPitch;
    VkDeviceSize           arrayPitch;
    VkDeviceSize           depthPitch;
} VkSubresourceLayout;

typedef struct VkImageViewCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkImageViewCreateFlags flags;
    VkImage                image;
    VkImageViewType        viewType;
    VkFormat               format;
    VkComponentMapping     components;
    VkImageSubresourceRange subresourceRange;
} VkImageViewCreateInfo;

typedef struct VkBufferCopy {
    VkDeviceSize                       srcOffset;
    VkDeviceSize                       dstOffset;
    VkDeviceSize size;
} VkBufferCopy;

typedef struct VkSparseMemoryBind {
    VkDeviceSize           resourceOffset;
    VkDeviceSize           size;
    VkDeviceMemory         memory;
    VkDeviceSize           memoryOffset;
    VkSparseMemoryBindFlags flags;
} VkSparseMemoryBind;

typedef struct VkSparseImageMemoryBind {
    VkImageSubresource     subresource;
    VkOffset3D             offset;
    VkExtent3D             extent;
    VkDeviceMemory         memory;
    VkDeviceSize           memoryOffset;
    VkSparseMemoryBindFlags flags;
} VkSparseImageMemoryBind;

typedef struct VkSparseBufferMemoryBindInfo {
    VkBuffer buffer;
    uint32_t               bindCount;
    const VkSparseMemoryBind* pBinds;
} VkSparseBufferMemoryBindInfo;

typedef struct VkSparseImageOpaqueMemoryBindInfo {
    VkImage image;
    uint32_t               bindCount;
    const VkSparseMemoryBind* pBinds;
} VkSparseImageOpaqueMemoryBindInfo;

typedef struct VkSparseImageMemoryBindInfo {
    VkImage image;
    uint32_t               bindCount;
    const VkSparseImageMemoryBind* pBinds;
} VkSparseImageMemoryBindInfo;

typedef struct VkBindSparseInfo {
    VkStructureType sType;
    const void*            pNext;
    uint32_t               waitSemaphoreCount;
    const VkSemaphore*     pWaitSemaphores;
    uint32_t               bufferBindCount;
    const VkSparseBufferMemoryBindInfo* pBufferBinds;
    uint32_t               imageOpaqueBindCount;
    const VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
    uint32_t               imageBindCount;
    const VkSparseImageMemoryBindInfo* pImageBinds;
    uint32_t               signalSemaphoreCount;
    const VkSemaphore*     pSignalSemaphores;
} VkBindSparseInfo;

typedef struct VkImageCopy {
    VkImageSubresourceLayers srcSubresource;
    VkOffset3D             srcOffset;
    VkImageSubresourceLayers dstSubresource;
    VkOffset3D             dstOffset;
    VkExtent3D             extent;
} VkImageCopy;

typedef struct VkImageBlit {
    VkImageSubresourceLayers srcSubresource;
    VkOffset3D             srcOffsets[2];
    VkImageSubresourceLayers dstSubresource;
    VkOffset3D             dstOffsets[2];
} VkImageBlit;

typedef struct VkBufferImageCopy {
    VkDeviceSize           bufferOffset;
    uint32_t               bufferRowLength;
    uint32_t               bufferImageHeight;
    VkImageSubresourceLayers imageSubresource;
    VkOffset3D             imageOffset;
    VkExtent3D             imageExtent;
} VkBufferImageCopy;

typedef struct VkImageResolve {
    VkImageSubresourceLayers srcSubresource;
    VkOffset3D             srcOffset;
    VkImageSubresourceLayers dstSubresource;
    VkOffset3D             dstOffset;
    VkExtent3D             extent;
} VkImageResolve;

typedef struct VkShaderModuleCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkShaderModuleCreateFlags flags;
    size_t                 codeSize;
    const uint32_t*            pCode;
} VkShaderModuleCreateInfo;

typedef struct VkDescriptorSetLayoutBinding {
    uint32_t               binding;
    VkDescriptorType       descriptorType;
    uint32_t descriptorCount;
    VkShaderStageFlags     stageFlags;
    const VkSampler*       pImmutableSamplers;
} VkDescriptorSetLayoutBinding;

typedef struct VkDescriptorSetLayoutCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkDescriptorSetLayoutCreateFlags    flags;
    uint32_t               bindingCount;
    const VkDescriptorSetLayoutBinding* pBindings;
} VkDescriptorSetLayoutCreateInfo;

typedef struct VkDescriptorPoolSize {
    VkDescriptorType       type;
    uint32_t               descriptorCount;
} VkDescriptorPoolSize;

typedef struct VkDescriptorPoolCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkDescriptorPoolCreateFlags  flags;
    uint32_t               maxSets;
    uint32_t               poolSizeCount;
    const VkDescriptorPoolSize* pPoolSizes;
} VkDescriptorPoolCreateInfo;

typedef struct VkDescriptorSetAllocateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkDescriptorPool       descriptorPool;
    uint32_t               descriptorSetCount;
    const VkDescriptorSetLayout* pSetLayouts;
} VkDescriptorSetAllocateInfo;

typedef struct VkSpecializationMapEntry {
    uint32_t                     constantID;
    uint32_t                     offset;
    size_t size;
} VkSpecializationMapEntry;

typedef struct VkSpecializationInfo {
    uint32_t               mapEntryCount;
    const VkSpecializationMapEntry* pMapEntries;
    size_t                 dataSize;
    const void*            pData;
} VkSpecializationInfo;

typedef struct VkPipelineShaderStageCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineShaderStageCreateFlags    flags;
    VkShaderStageFlagBits  stage;
    VkShaderModule         module;
    const char*            pName;
    const VkSpecializationInfo* pSpecializationInfo;
} VkPipelineShaderStageCreateInfo;

typedef struct VkComputePipelineCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineCreateFlags  flags;
    VkPipelineShaderStageCreateInfo stage;
    VkPipelineLayout       layout;
    VkPipeline      basePipelineHandle;
    int32_t                basePipelineIndex;
} VkComputePipelineCreateInfo;

typedef struct VkVertexInputBindingDescription {
    uint32_t               binding;
    uint32_t               stride;
    VkVertexInputRate      inputRate;
} VkVertexInputBindingDescription;

typedef struct VkVertexInputAttributeDescription {
    uint32_t               location;
    uint32_t               binding;
    VkFormat               format;
    uint32_t               offset;
} VkVertexInputAttributeDescription;

typedef struct VkPipelineVertexInputStateCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineVertexInputStateCreateFlags    flags;
    uint32_t               vertexBindingDescriptionCount;
    const VkVertexInputBindingDescription* pVertexBindingDescriptions;
    uint32_t               vertexAttributeDescriptionCount;
    const VkVertexInputAttributeDescription* pVertexAttributeDescriptions;
} VkPipelineVertexInputStateCreateInfo;

typedef struct VkPipelineInputAssemblyStateCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineInputAssemblyStateCreateFlags    flags;
    VkPrimitiveTopology    topology;
    VkBool32               primitiveRestartEnable;
} VkPipelineInputAssemblyStateCreateInfo;

typedef struct VkPipelineTessellationStateCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineTessellationStateCreateFlags    flags;
    uint32_t               patchControlPoints;
} VkPipelineTessellationStateCreateInfo;

typedef struct VkPipelineViewportStateCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineViewportStateCreateFlags    flags;
    uint32_t               viewportCount;
    const VkViewport*      pViewports;
    uint32_t               scissorCount;
    const VkRect2D*        pScissors;
} VkPipelineViewportStateCreateInfo;

typedef struct VkPipelineRasterizationStateCreateInfo {
    VkStructureType sType;
    const void* pNext;
    VkPipelineRasterizationStateCreateFlags    flags;
    VkBool32               depthClampEnable;
    VkBool32               rasterizerDiscardEnable;
    VkPolygonMode          polygonMode;
    VkCullModeFlags        cullMode;
    VkFrontFace            frontFace;
    VkBool32               depthBiasEnable;
    float                  depthBiasConstantFactor;
    float                  depthBiasClamp;
    float                  depthBiasSlopeFactor;
    float                  lineWidth;
} VkPipelineRasterizationStateCreateInfo;

typedef struct VkPipelineMultisampleStateCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineMultisampleStateCreateFlags    flags;
    VkSampleCountFlagBits  rasterizationSamples;
    VkBool32               sampleShadingEnable;
    float                  minSampleShading;
    const VkSampleMask*    pSampleMask;
    VkBool32               alphaToCoverageEnable;
    VkBool32               alphaToOneEnable;
} VkPipelineMultisampleStateCreateInfo;

typedef struct VkPipelineColorBlendAttachmentState {
    VkBool32               blendEnable;
    VkBlendFactor          srcColorBlendFactor;
    VkBlendFactor          dstColorBlendFactor;
    VkBlendOp              colorBlendOp;
    VkBlendFactor          srcAlphaBlendFactor;
    VkBlendFactor          dstAlphaBlendFactor;
    VkBlendOp              alphaBlendOp;
    VkColorComponentFlags  colorWriteMask;
} VkPipelineColorBlendAttachmentState;

typedef struct VkPipelineColorBlendStateCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineColorBlendStateCreateFlags    flags;
    VkBool32               logicOpEnable;
    VkLogicOp              logicOp;
    uint32_t               attachmentCount;
    const VkPipelineColorBlendAttachmentState* pAttachments;
    float                  blendConstants[4];
} VkPipelineColorBlendStateCreateInfo;

typedef struct VkPipelineDynamicStateCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineDynamicStateCreateFlags    flags;
    uint32_t               dynamicStateCount;
    const VkDynamicState*  pDynamicStates;
} VkPipelineDynamicStateCreateInfo;

typedef struct VkStencilOpState {
    VkStencilOp            failOp;
    VkStencilOp            passOp;
    VkStencilOp            depthFailOp;
    VkCompareOp            compareOp;
    uint32_t               compareMask;
    uint32_t               writeMask;
    uint32_t               reference;
} VkStencilOpState;

typedef struct VkPipelineDepthStencilStateCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineDepthStencilStateCreateFlags    flags;
    VkBool32               depthTestEnable;
    VkBool32               depthWriteEnable;
    VkCompareOp            depthCompareOp;
    VkBool32               depthBoundsTestEnable;
    VkBool32               stencilTestEnable;
    VkStencilOpState       front;
    VkStencilOpState       back;
    float                  minDepthBounds;
    float                  maxDepthBounds;
} VkPipelineDepthStencilStateCreateInfo;

typedef struct VkGraphicsPipelineCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineCreateFlags  flags;
    uint32_t               stageCount;
    const VkPipelineShaderStageCreateInfo* pStages;
    const VkPipelineVertexInputStateCreateInfo* pVertexInputState;
    const VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
    const VkPipelineTessellationStateCreateInfo* pTessellationState;
    const VkPipelineViewportStateCreateInfo* pViewportState;
    const VkPipelineRasterizationStateCreateInfo* pRasterizationState;
    const VkPipelineMultisampleStateCreateInfo* pMultisampleState;
    const VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
    const VkPipelineColorBlendStateCreateInfo* pColorBlendState;
    const VkPipelineDynamicStateCreateInfo* pDynamicState;
    VkPipelineLayout       layout;
    VkRenderPass           renderPass;
    uint32_t               subpass;
    VkPipeline      basePipelineHandle;
    int32_t                basePipelineIndex;
} VkGraphicsPipelineCreateInfo;

typedef struct VkPipelineCacheCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineCacheCreateFlags    flags;
    size_t                 initialDataSize;
    const void*            pInitialData;
} VkPipelineCacheCreateInfo;

typedef struct VkPipelineCacheHeaderVersionOne {
    uint32_t               headerSize;
    VkPipelineCacheHeaderVersion headerVersion;
    uint32_t               vendorID;
    uint32_t               deviceID;
    uint8_t                pipelineCacheUUID[VK_UUID_SIZE];
} VkPipelineCacheHeaderVersionOne;

typedef struct VkPushConstantRange {
    VkShaderStageFlags     stageFlags;
    uint32_t               offset;
    uint32_t               size;
} VkPushConstantRange;

typedef struct VkPipelineLayoutCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkPipelineLayoutCreateFlags    flags;
    uint32_t               setLayoutCount;
    const VkDescriptorSetLayout* pSetLayouts;
    uint32_t               pushConstantRangeCount;
    const VkPushConstantRange* pPushConstantRanges;
} VkPipelineLayoutCreateInfo;

typedef struct VkSamplerCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkSamplerCreateFlags   flags;
    VkFilter               magFilter;
    VkFilter               minFilter;
    VkSamplerMipmapMode    mipmapMode;
    VkSamplerAddressMode   addressModeU;
    VkSamplerAddressMode   addressModeV;
    VkSamplerAddressMode   addressModeW;
    float                  mipLodBias;
    VkBool32               anisotropyEnable;
    float                  maxAnisotropy;
    VkBool32               compareEnable;
    VkCompareOp            compareOp;
    float                  minLod;
    float                  maxLod;
    VkBorderColor          borderColor;
    VkBool32               unnormalizedCoordinates;
} VkSamplerCreateInfo;

typedef struct VkCommandPoolCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkCommandPoolCreateFlags   flags;
    uint32_t               queueFamilyIndex;
} VkCommandPoolCreateInfo;

typedef struct VkCommandBufferAllocateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkCommandPool          commandPool;
    VkCommandBufferLevel   level;
    uint32_t               commandBufferCount;
} VkCommandBufferAllocateInfo;

typedef struct VkCommandBufferInheritanceInfo {
    VkStructureType sType;
    const void*            pNext;
    VkRenderPass    renderPass;
    uint32_t               subpass;
    VkFramebuffer   framebuffer;
    VkBool32               occlusionQueryEnable;
    VkQueryControlFlags    queryFlags;
    VkQueryPipelineStatisticFlags pipelineStatistics;
} VkCommandBufferInheritanceInfo;

typedef struct VkCommandBufferBeginInfo {
    VkStructureType sType;
    const void*            pNext;
    VkCommandBufferUsageFlags  flags;
    const VkCommandBufferInheritanceInfo*       pInheritanceInfo;
} VkCommandBufferBeginInfo;

typedef union VkClearColorValue {
    float                  float32[4];
    int32_t                int32[4];
    uint32_t               uint32[4];
} VkClearColorValue;

typedef struct VkClearDepthStencilValue {
    float                  depth;
    uint32_t               stencil;
} VkClearDepthStencilValue;

typedef union VkClearValue {
    VkClearColorValue      color;
    VkClearDepthStencilValue depthStencil;
} VkClearValue;

typedef struct VkRenderPassBeginInfo {
    VkStructureType sType;
    const void*            pNext;
    VkRenderPass           renderPass;
    VkFramebuffer          framebuffer;
    VkRect2D               renderArea;
    uint32_t               clearValueCount;
    const VkClearValue*    pClearValues;
} VkRenderPassBeginInfo;

typedef struct VkClearAttachment {
    VkImageAspectFlags     aspectMask;
    uint32_t               colorAttachment;
    VkClearValue           clearValue;
} VkClearAttachment;

typedef struct VkAttachmentDescription {
    VkAttachmentDescriptionFlags flags;
    VkFormat               format;
    VkSampleCountFlagBits  samples;
    VkAttachmentLoadOp     loadOp;
    VkAttachmentStoreOp    storeOp;
    VkAttachmentLoadOp     stencilLoadOp;
    VkAttachmentStoreOp    stencilStoreOp;
    VkImageLayout          initialLayout;
    VkImageLayout          finalLayout;
} VkAttachmentDescription;

typedef struct VkAttachmentReference {
    uint32_t               attachment;
    VkImageLayout          layout;
} VkAttachmentReference;

typedef struct VkSubpassDescription {
    VkSubpassDescriptionFlags flags;
    VkPipelineBindPoint    pipelineBindPoint;
    uint32_t               inputAttachmentCount;
    const VkAttachmentReference* pInputAttachments;
    uint32_t               colorAttachmentCount;
    const VkAttachmentReference* pColorAttachments;
    const VkAttachmentReference* pResolveAttachments;
    const VkAttachmentReference* pDepthStencilAttachment;
    uint32_t               preserveAttachmentCount;
    const uint32_t* pPreserveAttachments;
} VkSubpassDescription;

typedef struct VkSubpassDependency {
    uint32_t               srcSubpass;
    uint32_t               dstSubpass;
    VkPipelineStageFlags   srcStageMask;
    VkPipelineStageFlags   dstStageMask;
    VkAccessFlags          srcAccessMask;
    VkAccessFlags          dstAccessMask;
    VkDependencyFlags      dependencyFlags;
} VkSubpassDependency;

typedef struct VkRenderPassCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkRenderPassCreateFlags flags;
    uint32_t   attachmentCount;
    const VkAttachmentDescription* pAttachments;
    uint32_t               subpassCount;
    const VkSubpassDescription* pSubpasses;
    uint32_t       dependencyCount;
    const VkSubpassDependency* pDependencies;
} VkRenderPassCreateInfo;

typedef struct VkEventCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkEventCreateFlags     flags;
} VkEventCreateInfo;

typedef struct VkFenceCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkFenceCreateFlags     flags;
} VkFenceCreateInfo;

typedef struct VkSemaphoreCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkSemaphoreCreateFlags flags;
} VkSemaphoreCreateInfo;

typedef struct VkQueryPoolCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkQueryPoolCreateFlags flags;
    VkQueryType            queryType;
    uint32_t               queryCount;
    VkQueryPipelineStatisticFlags pipelineStatistics;
} VkQueryPoolCreateInfo;

typedef struct VkFramebufferCreateInfo {
    VkStructureType sType;
    const void*            pNext;
    VkFramebufferCreateFlags    flags;
    VkRenderPass                           renderPass;
    uint32_t               attachmentCount;
    const VkImageView*     pAttachments;
    uint32_t               width;
    uint32_t               height;
    uint32_t               layers;
} VkFramebufferCreateInfo;

typedef struct VkDrawIndirectCommand {
    uint32_t                       vertexCount;
    uint32_t                       instanceCount;
    uint32_t                       firstVertex;
    uint32_t firstInstance;
} VkDrawIndirectCommand;

typedef struct VkDrawIndexedIndirectCommand {
    uint32_t                       indexCount;
    uint32_t                       instanceCount;
    uint32_t                       firstIndex;
    int32_t                        vertexOffset;
    uint32_t firstInstance;
} VkDrawIndexedIndirectCommand;

typedef struct VkDispatchIndirectCommand {
    uint32_t x;
    uint32_t y;
    uint32_t z;
} VkDispatchIndirectCommand;

typedef struct VkSubmitInfo {
    VkStructureType sType;
    const void* pNext;
    uint32_t       waitSemaphoreCount;
    const VkSemaphore*     pWaitSemaphores;
    const VkPipelineStageFlags*           pWaitDstStageMask;
    uint32_t       commandBufferCount;
    const VkCommandBuffer*     pCommandBuffers;
    uint32_t       signalSemaphoreCount;
    const VkSemaphore*     pSignalSemaphores;
} VkSubmitInfo;

typedef struct VkSurfaceCapabilitiesKHR {
    uint32_t                         minImageCount;
    uint32_t                         maxImageCount;
    VkExtent2D                       currentExtent;
    VkExtent2D                       minImageExtent;
    VkExtent2D                       maxImageExtent;
    uint32_t                         maxImageArrayLayers;
    VkSurfaceTransformFlagsKHR       supportedTransforms;
    VkSurfaceTransformFlagBitsKHR    currentTransform;
    VkCompositeAlphaFlagsKHR         supportedCompositeAlpha;
    VkImageUsageFlags                supportedUsageFlags;
} VkSurfaceCapabilitiesKHR;

typedef struct VkSurfaceFormatKHR {
    VkFormat                         format;
    VkColorSpaceKHR                  colorSpace;
} VkSurfaceFormatKHR;

typedef struct VkSwapchainCreateInfoKHR {
    VkStructureType sType;
    const void*                      pNext;
    VkSwapchainCreateFlagsKHR        flags;
    VkSurfaceKHR                     surface;
    uint32_t                         minImageCount;
    VkFormat                         imageFormat;
    VkColorSpaceKHR                  imageColorSpace;
    VkExtent2D                       imageExtent;
    uint32_t                         imageArrayLayers;
    VkImageUsageFlags                imageUsage;
    VkSharingMode                    imageSharingMode;
    uint32_t         queueFamilyIndexCount;
    const uint32_t*                  pQueueFamilyIndices;
    VkSurfaceTransformFlagBitsKHR    preTransform;
    VkCompositeAlphaFlagBitsKHR      compositeAlpha;
    VkPresentModeKHR                 presentMode;
    VkBool32                         clipped;
    VkSwapchainKHR   oldSwapchain;
} VkSwapchainCreateInfoKHR;

typedef struct VkPresentInfoKHR {
    VkStructureType sType;
    const void*  pNext;
    uint32_t         waitSemaphoreCount;
    const VkSemaphore* pWaitSemaphores;
    uint32_t                         swapchainCount;
    const VkSwapchainKHR* pSwapchains;
    const uint32_t* pImageIndices;
    VkResult* pResults;
} VkPresentInfoKHR;

typedef struct VkDebugReportCallbackCreateInfoEXT {
    VkStructureType sType;
    const void*                      pNext;
    VkDebugReportFlagsEXT            flags;
    PFN_vkDebugReportCallbackEXT     pfnCallback;
    void*            pUserData;
} VkDebugReportCallbackCreateInfoEXT;

typedef struct VkDeviceGroupPresentCapabilitiesKHR {
    VkStructureType sType;
    void*            pNext;
    uint32_t                         presentMask[VK_MAX_DEVICE_GROUP_SIZE];
    VkDeviceGroupPresentModeFlagsKHR modes;
} VkDeviceGroupPresentCapabilitiesKHR;

typedef struct VkImageSwapchainCreateInfoKHR {
    VkStructureType sType;
    const void*                      pNext;
    VkSwapchainKHR   swapchain;
} VkImageSwapchainCreateInfoKHR;

typedef struct VkAcquireNextImageInfoKHR {
    VkStructureType sType;
    const void*                      pNext;
    VkSwapchainKHR swapchain;
    uint64_t                         timeout;
    VkSemaphore semaphore;
    VkFence fence;
    uint32_t                         deviceMask;
} VkAcquireNextImageInfoKHR;

typedef struct VkDeviceGroupPresentInfoKHR {
    VkStructureType sType;
    const void*                      pNext;
    uint32_t         swapchainCount;
    const uint32_t* pDeviceMasks;
    VkDeviceGroupPresentModeFlagBitsKHR mode;
} VkDeviceGroupPresentInfoKHR;

typedef struct VkDeviceGroupSwapchainCreateInfoKHR {
    VkStructureType sType;
    const void*                      pNext;
    VkDeviceGroupPresentModeFlagsKHR                         modes;
} VkDeviceGroupSwapchainCreateInfoKHR;

/* The following function pointers are loaded globally by calling flextVkInit() */













typedef VkResult (VKAPI_PTR PFNVKCREATEINSTANCE_PROC (const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance));
typedef VkResult (VKAPI_PTR PFNVKENUMERATEINSTANCEEXTENSIONPROPERTIES_PROC (const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties));
typedef VkResult (VKAPI_PTR PFNVKENUMERATEINSTANCELAYERPROPERTIES_PROC (uint32_t* pPropertyCount, VkLayerProperties* pProperties));
typedef PFN_vkVoidFunction (VKAPI_PTR PFNVKGETINSTANCEPROCADDR_PROC (VkInstance instance, const char* pName));

VKAPI_PTR PFNVKCREATEINSTANCE_PROC* flextvkCreateInstance;
VKAPI_PTR PFNVKENUMERATEINSTANCEEXTENSIONPROPERTIES_PROC* flextvkEnumerateInstanceExtensionProperties;
VKAPI_PTR PFNVKENUMERATEINSTANCELAYERPROPERTIES_PROC* flextvkEnumerateInstanceLayerProperties;
VKAPI_PTR PFNVKGETINSTANCEPROCADDR_PROC* flextvkGetInstanceProcAddr;

#define vkCreateInstance flextvkCreateInstance
#define vkEnumerateInstanceExtensionProperties flextvkEnumerateInstanceExtensionProperties
#define vkEnumerateInstanceLayerProperties flextvkEnumerateInstanceLayerProperties
#define vkGetInstanceProcAddr flextvkGetInstanceProcAddr


/* Function pointers */


/* VK_EXT_debug_report */

typedef VkResult (VKAPI_PTR PFNVKCREATEDEBUGREPORTCALLBACKEXT_PROC (VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback));
typedef void (VKAPI_PTR PFNVKDEBUGREPORTMESSAGEEXT_PROC (VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage));
typedef void (VKAPI_PTR PFNVKDESTROYDEBUGREPORTCALLBACKEXT_PROC (VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator));

VKAPI_PTR PFNVKCREATEDEBUGREPORTCALLBACKEXT_PROC* flextvkCreateDebugReportCallbackEXT;
VKAPI_PTR PFNVKDEBUGREPORTMESSAGEEXT_PROC* flextvkDebugReportMessageEXT;
VKAPI_PTR PFNVKDESTROYDEBUGREPORTCALLBACKEXT_PROC* flextvkDestroyDebugReportCallbackEXT;

#define vkCreateDebugReportCallbackEXT flextvkCreateDebugReportCallbackEXT
#define vkDebugReportMessageEXT flextvkDebugReportMessageEXT
#define vkDestroyDebugReportCallbackEXT flextvkDestroyDebugReportCallbackEXT


/* VK_KHR_surface */

typedef void (VKAPI_PTR PFNVKDESTROYSURFACEKHR_PROC (VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator));
typedef VkResult (VKAPI_PTR PFNVKGETPHYSICALDEVICESURFACECAPABILITIESKHR_PROC (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities));
typedef VkResult (VKAPI_PTR PFNVKGETPHYSICALDEVICESURFACEFORMATSKHR_PROC (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats));
typedef VkResult (VKAPI_PTR PFNVKGETPHYSICALDEVICESURFACEPRESENTMODESKHR_PROC (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes));
typedef VkResult (VKAPI_PTR PFNVKGETPHYSICALDEVICESURFACESUPPORTKHR_PROC (VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported));

VKAPI_PTR PFNVKDESTROYSURFACEKHR_PROC* flextvkDestroySurfaceKHR;
VKAPI_PTR PFNVKGETPHYSICALDEVICESURFACECAPABILITIESKHR_PROC* flextvkGetPhysicalDeviceSurfaceCapabilitiesKHR;
VKAPI_PTR PFNVKGETPHYSICALDEVICESURFACEFORMATSKHR_PROC* flextvkGetPhysicalDeviceSurfaceFormatsKHR;
VKAPI_PTR PFNVKGETPHYSICALDEVICESURFACEPRESENTMODESKHR_PROC* flextvkGetPhysicalDeviceSurfacePresentModesKHR;
VKAPI_PTR PFNVKGETPHYSICALDEVICESURFACESUPPORTKHR_PROC* flextvkGetPhysicalDeviceSurfaceSupportKHR;

#define vkDestroySurfaceKHR flextvkDestroySurfaceKHR
#define vkGetPhysicalDeviceSurfaceCapabilitiesKHR flextvkGetPhysicalDeviceSurfaceCapabilitiesKHR
#define vkGetPhysicalDeviceSurfaceFormatsKHR flextvkGetPhysicalDeviceSurfaceFormatsKHR
#define vkGetPhysicalDeviceSurfacePresentModesKHR flextvkGetPhysicalDeviceSurfacePresentModesKHR
#define vkGetPhysicalDeviceSurfaceSupportKHR flextvkGetPhysicalDeviceSurfaceSupportKHR


/* VK_KHR_swapchain */

typedef VkResult (VKAPI_PTR PFNVKACQUIRENEXTIMAGE2KHR_PROC (VkDevice device, const VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex));
typedef VkResult (VKAPI_PTR PFNVKACQUIRENEXTIMAGEKHR_PROC (VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex));
typedef VkResult (VKAPI_PTR PFNVKCREATESWAPCHAINKHR_PROC (VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain));
typedef void (VKAPI_PTR PFNVKDESTROYSWAPCHAINKHR_PROC (VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator));
typedef VkResult (VKAPI_PTR PFNVKGETDEVICEGROUPPRESENTCAPABILITIESKHR_PROC (VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities));
typedef VkResult (VKAPI_PTR PFNVKGETDEVICEGROUPSURFACEPRESENTMODESKHR_PROC (VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes));
typedef VkResult (VKAPI_PTR PFNVKGETPHYSICALDEVICEPRESENTRECTANGLESKHR_PROC (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects));
typedef VkResult (VKAPI_PTR PFNVKGETSWAPCHAINIMAGESKHR_PROC (VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages));
typedef VkResult (VKAPI_PTR PFNVKQUEUEPRESENTKHR_PROC (VkQueue queue, const VkPresentInfoKHR* pPresentInfo));

VKAPI_PTR PFNVKACQUIRENEXTIMAGE2KHR_PROC* flextvkAcquireNextImage2KHR;
VKAPI_PTR PFNVKACQUIRENEXTIMAGEKHR_PROC* flextvkAcquireNextImageKHR;
VKAPI_PTR PFNVKCREATESWAPCHAINKHR_PROC* flextvkCreateSwapchainKHR;
VKAPI_PTR PFNVKDESTROYSWAPCHAINKHR_PROC* flextvkDestroySwapchainKHR;
VKAPI_PTR PFNVKGETDEVICEGROUPPRESENTCAPABILITIESKHR_PROC* flextvkGetDeviceGroupPresentCapabilitiesKHR;
VKAPI_PTR PFNVKGETDEVICEGROUPSURFACEPRESENTMODESKHR_PROC* flextvkGetDeviceGroupSurfacePresentModesKHR;
VKAPI_PTR PFNVKGETPHYSICALDEVICEPRESENTRECTANGLESKHR_PROC* flextvkGetPhysicalDevicePresentRectanglesKHR;
VKAPI_PTR PFNVKGETSWAPCHAINIMAGESKHR_PROC* flextvkGetSwapchainImagesKHR;
VKAPI_PTR PFNVKQUEUEPRESENTKHR_PROC* flextvkQueuePresentKHR;

#define vkAcquireNextImage2KHR flextvkAcquireNextImage2KHR
#define vkAcquireNextImageKHR flextvkAcquireNextImageKHR
#define vkCreateSwapchainKHR flextvkCreateSwapchainKHR
#define vkDestroySwapchainKHR flextvkDestroySwapchainKHR
#define vkGetDeviceGroupPresentCapabilitiesKHR flextvkGetDeviceGroupPresentCapabilitiesKHR
#define vkGetDeviceGroupSurfacePresentModesKHR flextvkGetDeviceGroupSurfacePresentModesKHR
#define vkGetPhysicalDevicePresentRectanglesKHR flextvkGetPhysicalDevicePresentRectanglesKHR
#define vkGetSwapchainImagesKHR flextvkGetSwapchainImagesKHR
#define vkQueuePresentKHR flextvkQueuePresentKHR


/* VK_VERSION_1_0 */

typedef VkResult (VKAPI_PTR PFNVKALLOCATECOMMANDBUFFERS_PROC (VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers));
typedef VkResult (VKAPI_PTR PFNVKALLOCATEDESCRIPTORSETS_PROC (VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets));
typedef VkResult (VKAPI_PTR PFNVKALLOCATEMEMORY_PROC (VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory));
typedef VkResult (VKAPI_PTR PFNVKBEGINCOMMANDBUFFER_PROC (VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo));
typedef VkResult (VKAPI_PTR PFNVKBINDBUFFERMEMORY_PROC (VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset));
typedef VkResult (VKAPI_PTR PFNVKBINDIMAGEMEMORY_PROC (VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset));
typedef void (VKAPI_PTR PFNVKCMDBEGINQUERY_PROC (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags));
typedef void (VKAPI_PTR PFNVKCMDBEGINRENDERPASS_PROC (VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents));
typedef void (VKAPI_PTR PFNVKCMDBINDDESCRIPTORSETS_PROC (VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets));
typedef void (VKAPI_PTR PFNVKCMDBINDINDEXBUFFER_PROC (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType));
typedef void (VKAPI_PTR PFNVKCMDBINDPIPELINE_PROC (VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline));
typedef void (VKAPI_PTR PFNVKCMDBINDVERTEXBUFFERS_PROC (VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets));
typedef void (VKAPI_PTR PFNVKCMDBLITIMAGE_PROC (VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter));
typedef void (VKAPI_PTR PFNVKCMDCLEARATTACHMENTS_PROC (VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects));
typedef void (VKAPI_PTR PFNVKCMDCLEARCOLORIMAGE_PROC (VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges));
typedef void (VKAPI_PTR PFNVKCMDCLEARDEPTHSTENCILIMAGE_PROC (VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges));
typedef void (VKAPI_PTR PFNVKCMDCOPYBUFFER_PROC (VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions));
typedef void (VKAPI_PTR PFNVKCMDCOPYBUFFERTOIMAGE_PROC (VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions));
typedef void (VKAPI_PTR PFNVKCMDCOPYIMAGE_PROC (VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions));
typedef void (VKAPI_PTR PFNVKCMDCOPYIMAGETOBUFFER_PROC (VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions));
typedef void (VKAPI_PTR PFNVKCMDCOPYQUERYPOOLRESULTS_PROC (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags));
typedef void (VKAPI_PTR PFNVKCMDDISPATCH_PROC (VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ));
typedef void (VKAPI_PTR PFNVKCMDDISPATCHINDIRECT_PROC (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset));
typedef void (VKAPI_PTR PFNVKCMDDRAW_PROC (VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance));
typedef void (VKAPI_PTR PFNVKCMDDRAWINDEXED_PROC (VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance));
typedef void (VKAPI_PTR PFNVKCMDDRAWINDEXEDINDIRECT_PROC (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride));
typedef void (VKAPI_PTR PFNVKCMDDRAWINDIRECT_PROC (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride));
typedef void (VKAPI_PTR PFNVKCMDENDQUERY_PROC (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query));
typedef void (VKAPI_PTR PFNVKCMDENDRENDERPASS_PROC (VkCommandBuffer commandBuffer));
typedef void (VKAPI_PTR PFNVKCMDEXECUTECOMMANDS_PROC (VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers));
typedef void (VKAPI_PTR PFNVKCMDFILLBUFFER_PROC (VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data));
typedef void (VKAPI_PTR PFNVKCMDNEXTSUBPASS_PROC (VkCommandBuffer commandBuffer, VkSubpassContents contents));
typedef void (VKAPI_PTR PFNVKCMDPIPELINEBARRIER_PROC (VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers));
typedef void (VKAPI_PTR PFNVKCMDPUSHCONSTANTS_PROC (VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues));
typedef void (VKAPI_PTR PFNVKCMDRESETEVENT_PROC (VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask));
typedef void (VKAPI_PTR PFNVKCMDRESETQUERYPOOL_PROC (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount));
typedef void (VKAPI_PTR PFNVKCMDRESOLVEIMAGE_PROC (VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions));
typedef void (VKAPI_PTR PFNVKCMDSETBLENDCONSTANTS_PROC (VkCommandBuffer commandBuffer, const float blendConstants[4]));
typedef void (VKAPI_PTR PFNVKCMDSETDEPTHBIAS_PROC (VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor));
typedef void (VKAPI_PTR PFNVKCMDSETDEPTHBOUNDS_PROC (VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds));
typedef void (VKAPI_PTR PFNVKCMDSETEVENT_PROC (VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask));
typedef void (VKAPI_PTR PFNVKCMDSETLINEWIDTH_PROC (VkCommandBuffer commandBuffer, float lineWidth));
typedef void (VKAPI_PTR PFNVKCMDSETSCISSOR_PROC (VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors));
typedef void (VKAPI_PTR PFNVKCMDSETSTENCILCOMPAREMASK_PROC (VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask));
typedef void (VKAPI_PTR PFNVKCMDSETSTENCILREFERENCE_PROC (VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference));
typedef void (VKAPI_PTR PFNVKCMDSETSTENCILWRITEMASK_PROC (VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask));
typedef void (VKAPI_PTR PFNVKCMDSETVIEWPORT_PROC (VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports));
typedef void (VKAPI_PTR PFNVKCMDUPDATEBUFFER_PROC (VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData));
typedef void (VKAPI_PTR PFNVKCMDWAITEVENTS_PROC (VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers));
typedef void (VKAPI_PTR PFNVKCMDWRITETIMESTAMP_PROC (VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query));
typedef VkResult (VKAPI_PTR PFNVKCREATEBUFFER_PROC (VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer));
typedef VkResult (VKAPI_PTR PFNVKCREATEBUFFERVIEW_PROC (VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView));
typedef VkResult (VKAPI_PTR PFNVKCREATECOMMANDPOOL_PROC (VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool));
typedef VkResult (VKAPI_PTR PFNVKCREATECOMPUTEPIPELINES_PROC (VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines));
typedef VkResult (VKAPI_PTR PFNVKCREATEDESCRIPTORPOOL_PROC (VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool));
typedef VkResult (VKAPI_PTR PFNVKCREATEDESCRIPTORSETLAYOUT_PROC (VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout));
typedef VkResult (VKAPI_PTR PFNVKCREATEDEVICE_PROC (VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice));
typedef VkResult (VKAPI_PTR PFNVKCREATEEVENT_PROC (VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent));
typedef VkResult (VKAPI_PTR PFNVKCREATEFENCE_PROC (VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence));
typedef VkResult (VKAPI_PTR PFNVKCREATEFRAMEBUFFER_PROC (VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer));
typedef VkResult (VKAPI_PTR PFNVKCREATEGRAPHICSPIPELINES_PROC (VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines));
typedef VkResult (VKAPI_PTR PFNVKCREATEIMAGE_PROC (VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage));
typedef VkResult (VKAPI_PTR PFNVKCREATEIMAGEVIEW_PROC (VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView));
typedef VkResult (VKAPI_PTR PFNVKCREATEPIPELINECACHE_PROC (VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache));
typedef VkResult (VKAPI_PTR PFNVKCREATEPIPELINELAYOUT_PROC (VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout));
typedef VkResult (VKAPI_PTR PFNVKCREATEQUERYPOOL_PROC (VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool));
typedef VkResult (VKAPI_PTR PFNVKCREATERENDERPASS_PROC (VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass));
typedef VkResult (VKAPI_PTR PFNVKCREATESAMPLER_PROC (VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler));
typedef VkResult (VKAPI_PTR PFNVKCREATESEMAPHORE_PROC (VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore));
typedef VkResult (VKAPI_PTR PFNVKCREATESHADERMODULE_PROC (VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule));
typedef void (VKAPI_PTR PFNVKDESTROYBUFFER_PROC (VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYBUFFERVIEW_PROC (VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYCOMMANDPOOL_PROC (VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYDESCRIPTORPOOL_PROC (VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYDESCRIPTORSETLAYOUT_PROC (VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYDEVICE_PROC (VkDevice device, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYEVENT_PROC (VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYFENCE_PROC (VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYFRAMEBUFFER_PROC (VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYIMAGE_PROC (VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYIMAGEVIEW_PROC (VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYINSTANCE_PROC (VkInstance instance, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYPIPELINE_PROC (VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYPIPELINECACHE_PROC (VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYPIPELINELAYOUT_PROC (VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYQUERYPOOL_PROC (VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYRENDERPASS_PROC (VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYSAMPLER_PROC (VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYSEMAPHORE_PROC (VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKDESTROYSHADERMODULE_PROC (VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator));
typedef VkResult (VKAPI_PTR PFNVKDEVICEWAITIDLE_PROC (VkDevice device));
typedef VkResult (VKAPI_PTR PFNVKENDCOMMANDBUFFER_PROC (VkCommandBuffer commandBuffer));
typedef VkResult (VKAPI_PTR PFNVKENUMERATEDEVICEEXTENSIONPROPERTIES_PROC (VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties));
typedef VkResult (VKAPI_PTR PFNVKENUMERATEDEVICELAYERPROPERTIES_PROC (VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties));
typedef VkResult (VKAPI_PTR PFNVKENUMERATEPHYSICALDEVICES_PROC (VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices));
typedef VkResult (VKAPI_PTR PFNVKFLUSHMAPPEDMEMORYRANGES_PROC (VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges));
typedef void (VKAPI_PTR PFNVKFREECOMMANDBUFFERS_PROC (VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers));
typedef VkResult (VKAPI_PTR PFNVKFREEDESCRIPTORSETS_PROC (VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets));
typedef void (VKAPI_PTR PFNVKFREEMEMORY_PROC (VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator));
typedef void (VKAPI_PTR PFNVKGETBUFFERMEMORYREQUIREMENTS_PROC (VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements));
typedef void (VKAPI_PTR PFNVKGETDEVICEMEMORYCOMMITMENT_PROC (VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes));
typedef PFN_vkVoidFunction (VKAPI_PTR PFNVKGETDEVICEPROCADDR_PROC (VkDevice device, const char* pName));
typedef void (VKAPI_PTR PFNVKGETDEVICEQUEUE_PROC (VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue));
typedef VkResult (VKAPI_PTR PFNVKGETEVENTSTATUS_PROC (VkDevice device, VkEvent event));
typedef VkResult (VKAPI_PTR PFNVKGETFENCESTATUS_PROC (VkDevice device, VkFence fence));
typedef void (VKAPI_PTR PFNVKGETIMAGEMEMORYREQUIREMENTS_PROC (VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements));
typedef void (VKAPI_PTR PFNVKGETIMAGESPARSEMEMORYREQUIREMENTS_PROC (VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements));
typedef void (VKAPI_PTR PFNVKGETIMAGESUBRESOURCELAYOUT_PROC (VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout));
typedef void (VKAPI_PTR PFNVKGETPHYSICALDEVICEFEATURES_PROC (VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures));
typedef void (VKAPI_PTR PFNVKGETPHYSICALDEVICEFORMATPROPERTIES_PROC (VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties));
typedef VkResult (VKAPI_PTR PFNVKGETPHYSICALDEVICEIMAGEFORMATPROPERTIES_PROC (VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties));
typedef void (VKAPI_PTR PFNVKGETPHYSICALDEVICEMEMORYPROPERTIES_PROC (VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties));
typedef void (VKAPI_PTR PFNVKGETPHYSICALDEVICEPROPERTIES_PROC (VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties));
typedef void (VKAPI_PTR PFNVKGETPHYSICALDEVICEQUEUEFAMILYPROPERTIES_PROC (VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties));
typedef void (VKAPI_PTR PFNVKGETPHYSICALDEVICESPARSEIMAGEFORMATPROPERTIES_PROC (VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties));
typedef VkResult (VKAPI_PTR PFNVKGETPIPELINECACHEDATA_PROC (VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData));
typedef VkResult (VKAPI_PTR PFNVKGETQUERYPOOLRESULTS_PROC (VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags));
typedef void (VKAPI_PTR PFNVKGETRENDERAREAGRANULARITY_PROC (VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity));
typedef VkResult (VKAPI_PTR PFNVKINVALIDATEMAPPEDMEMORYRANGES_PROC (VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges));
typedef VkResult (VKAPI_PTR PFNVKMAPMEMORY_PROC (VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData));
typedef VkResult (VKAPI_PTR PFNVKMERGEPIPELINECACHES_PROC (VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches));
typedef VkResult (VKAPI_PTR PFNVKQUEUEBINDSPARSE_PROC (VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence));
typedef VkResult (VKAPI_PTR PFNVKQUEUESUBMIT_PROC (VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence));
typedef VkResult (VKAPI_PTR PFNVKQUEUEWAITIDLE_PROC (VkQueue queue));
typedef VkResult (VKAPI_PTR PFNVKRESETCOMMANDBUFFER_PROC (VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags));
typedef VkResult (VKAPI_PTR PFNVKRESETCOMMANDPOOL_PROC (VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags));
typedef VkResult (VKAPI_PTR PFNVKRESETDESCRIPTORPOOL_PROC (VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags));
typedef VkResult (VKAPI_PTR PFNVKRESETEVENT_PROC (VkDevice device, VkEvent event));
typedef VkResult (VKAPI_PTR PFNVKRESETFENCES_PROC (VkDevice device, uint32_t fenceCount, const VkFence* pFences));
typedef VkResult (VKAPI_PTR PFNVKSETEVENT_PROC (VkDevice device, VkEvent event));
typedef void (VKAPI_PTR PFNVKUNMAPMEMORY_PROC (VkDevice device, VkDeviceMemory memory));
typedef void (VKAPI_PTR PFNVKUPDATEDESCRIPTORSETS_PROC (VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies));
typedef VkResult (VKAPI_PTR PFNVKWAITFORFENCES_PROC (VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout));

VKAPI_PTR PFNVKALLOCATECOMMANDBUFFERS_PROC* flextvkAllocateCommandBuffers;
VKAPI_PTR PFNVKALLOCATEDESCRIPTORSETS_PROC* flextvkAllocateDescriptorSets;
VKAPI_PTR PFNVKALLOCATEMEMORY_PROC* flextvkAllocateMemory;
VKAPI_PTR PFNVKBEGINCOMMANDBUFFER_PROC* flextvkBeginCommandBuffer;
VKAPI_PTR PFNVKBINDBUFFERMEMORY_PROC* flextvkBindBufferMemory;
VKAPI_PTR PFNVKBINDIMAGEMEMORY_PROC* flextvkBindImageMemory;
VKAPI_PTR PFNVKCMDBEGINQUERY_PROC* flextvkCmdBeginQuery;
VKAPI_PTR PFNVKCMDBEGINRENDERPASS_PROC* flextvkCmdBeginRenderPass;
VKAPI_PTR PFNVKCMDBINDDESCRIPTORSETS_PROC* flextvkCmdBindDescriptorSets;
VKAPI_PTR PFNVKCMDBINDINDEXBUFFER_PROC* flextvkCmdBindIndexBuffer;
VKAPI_PTR PFNVKCMDBINDPIPELINE_PROC* flextvkCmdBindPipeline;
VKAPI_PTR PFNVKCMDBINDVERTEXBUFFERS_PROC* flextvkCmdBindVertexBuffers;
VKAPI_PTR PFNVKCMDBLITIMAGE_PROC* flextvkCmdBlitImage;
VKAPI_PTR PFNVKCMDCLEARATTACHMENTS_PROC* flextvkCmdClearAttachments;
VKAPI_PTR PFNVKCMDCLEARCOLORIMAGE_PROC* flextvkCmdClearColorImage;
VKAPI_PTR PFNVKCMDCLEARDEPTHSTENCILIMAGE_PROC* flextvkCmdClearDepthStencilImage;
VKAPI_PTR PFNVKCMDCOPYBUFFER_PROC* flextvkCmdCopyBuffer;
VKAPI_PTR PFNVKCMDCOPYBUFFERTOIMAGE_PROC* flextvkCmdCopyBufferToImage;
VKAPI_PTR PFNVKCMDCOPYIMAGE_PROC* flextvkCmdCopyImage;
VKAPI_PTR PFNVKCMDCOPYIMAGETOBUFFER_PROC* flextvkCmdCopyImageToBuffer;
VKAPI_PTR PFNVKCMDCOPYQUERYPOOLRESULTS_PROC* flextvkCmdCopyQueryPoolResults;
VKAPI_PTR PFNVKCMDDISPATCH_PROC* flextvkCmdDispatch;
VKAPI_PTR PFNVKCMDDISPATCHINDIRECT_PROC* flextvkCmdDispatchIndirect;
VKAPI_PTR PFNVKCMDDRAW_PROC* flextvkCmdDraw;
VKAPI_PTR PFNVKCMDDRAWINDEXED_PROC* flextvkCmdDrawIndexed;
VKAPI_PTR PFNVKCMDDRAWINDEXEDINDIRECT_PROC* flextvkCmdDrawIndexedIndirect;
VKAPI_PTR PFNVKCMDDRAWINDIRECT_PROC* flextvkCmdDrawIndirect;
VKAPI_PTR PFNVKCMDENDQUERY_PROC* flextvkCmdEndQuery;
VKAPI_PTR PFNVKCMDENDRENDERPASS_PROC* flextvkCmdEndRenderPass;
VKAPI_PTR PFNVKCMDEXECUTECOMMANDS_PROC* flextvkCmdExecuteCommands;
VKAPI_PTR PFNVKCMDFILLBUFFER_PROC* flextvkCmdFillBuffer;
VKAPI_PTR PFNVKCMDNEXTSUBPASS_PROC* flextvkCmdNextSubpass;
VKAPI_PTR PFNVKCMDPIPELINEBARRIER_PROC* flextvkCmdPipelineBarrier;
VKAPI_PTR PFNVKCMDPUSHCONSTANTS_PROC* flextvkCmdPushConstants;
VKAPI_PTR PFNVKCMDRESETEVENT_PROC* flextvkCmdResetEvent;
VKAPI_PTR PFNVKCMDRESETQUERYPOOL_PROC* flextvkCmdResetQueryPool;
VKAPI_PTR PFNVKCMDRESOLVEIMAGE_PROC* flextvkCmdResolveImage;
VKAPI_PTR PFNVKCMDSETBLENDCONSTANTS_PROC* flextvkCmdSetBlendConstants;
VKAPI_PTR PFNVKCMDSETDEPTHBIAS_PROC* flextvkCmdSetDepthBias;
VKAPI_PTR PFNVKCMDSETDEPTHBOUNDS_PROC* flextvkCmdSetDepthBounds;
VKAPI_PTR PFNVKCMDSETEVENT_PROC* flextvkCmdSetEvent;
VKAPI_PTR PFNVKCMDSETLINEWIDTH_PROC* flextvkCmdSetLineWidth;
VKAPI_PTR PFNVKCMDSETSCISSOR_PROC* flextvkCmdSetScissor;
VKAPI_PTR PFNVKCMDSETSTENCILCOMPAREMASK_PROC* flextvkCmdSetStencilCompareMask;
VKAPI_PTR PFNVKCMDSETSTENCILREFERENCE_PROC* flextvkCmdSetStencilReference;
VKAPI_PTR PFNVKCMDSETSTENCILWRITEMASK_PROC* flextvkCmdSetStencilWriteMask;
VKAPI_PTR PFNVKCMDSETVIEWPORT_PROC* flextvkCmdSetViewport;
VKAPI_PTR PFNVKCMDUPDATEBUFFER_PROC* flextvkCmdUpdateBuffer;
VKAPI_PTR PFNVKCMDWAITEVENTS_PROC* flextvkCmdWaitEvents;
VKAPI_PTR PFNVKCMDWRITETIMESTAMP_PROC* flextvkCmdWriteTimestamp;
VKAPI_PTR PFNVKCREATEBUFFER_PROC* flextvkCreateBuffer;
VKAPI_PTR PFNVKCREATEBUFFERVIEW_PROC* flextvkCreateBufferView;
VKAPI_PTR PFNVKCREATECOMMANDPOOL_PROC* flextvkCreateCommandPool;
VKAPI_PTR PFNVKCREATECOMPUTEPIPELINES_PROC* flextvkCreateComputePipelines;
VKAPI_PTR PFNVKCREATEDESCRIPTORPOOL_PROC* flextvkCreateDescriptorPool;
VKAPI_PTR PFNVKCREATEDESCRIPTORSETLAYOUT_PROC* flextvkCreateDescriptorSetLayout;
VKAPI_PTR PFNVKCREATEDEVICE_PROC* flextvkCreateDevice;
VKAPI_PTR PFNVKCREATEEVENT_PROC* flextvkCreateEvent;
VKAPI_PTR PFNVKCREATEFENCE_PROC* flextvkCreateFence;
VKAPI_PTR PFNVKCREATEFRAMEBUFFER_PROC* flextvkCreateFramebuffer;
VKAPI_PTR PFNVKCREATEGRAPHICSPIPELINES_PROC* flextvkCreateGraphicsPipelines;
VKAPI_PTR PFNVKCREATEIMAGE_PROC* flextvkCreateImage;
VKAPI_PTR PFNVKCREATEIMAGEVIEW_PROC* flextvkCreateImageView;
VKAPI_PTR PFNVKCREATEPIPELINECACHE_PROC* flextvkCreatePipelineCache;
VKAPI_PTR PFNVKCREATEPIPELINELAYOUT_PROC* flextvkCreatePipelineLayout;
VKAPI_PTR PFNVKCREATEQUERYPOOL_PROC* flextvkCreateQueryPool;
VKAPI_PTR PFNVKCREATERENDERPASS_PROC* flextvkCreateRenderPass;
VKAPI_PTR PFNVKCREATESAMPLER_PROC* flextvkCreateSampler;
VKAPI_PTR PFNVKCREATESEMAPHORE_PROC* flextvkCreateSemaphore;
VKAPI_PTR PFNVKCREATESHADERMODULE_PROC* flextvkCreateShaderModule;
VKAPI_PTR PFNVKDESTROYBUFFER_PROC* flextvkDestroyBuffer;
VKAPI_PTR PFNVKDESTROYBUFFERVIEW_PROC* flextvkDestroyBufferView;
VKAPI_PTR PFNVKDESTROYCOMMANDPOOL_PROC* flextvkDestroyCommandPool;
VKAPI_PTR PFNVKDESTROYDESCRIPTORPOOL_PROC* flextvkDestroyDescriptorPool;
VKAPI_PTR PFNVKDESTROYDESCRIPTORSETLAYOUT_PROC* flextvkDestroyDescriptorSetLayout;
VKAPI_PTR PFNVKDESTROYDEVICE_PROC* flextvkDestroyDevice;
VKAPI_PTR PFNVKDESTROYEVENT_PROC* flextvkDestroyEvent;
VKAPI_PTR PFNVKDESTROYFENCE_PROC* flextvkDestroyFence;
VKAPI_PTR PFNVKDESTROYFRAMEBUFFER_PROC* flextvkDestroyFramebuffer;
VKAPI_PTR PFNVKDESTROYIMAGE_PROC* flextvkDestroyImage;
VKAPI_PTR PFNVKDESTROYIMAGEVIEW_PROC* flextvkDestroyImageView;
VKAPI_PTR PFNVKDESTROYINSTANCE_PROC* flextvkDestroyInstance;
VKAPI_PTR PFNVKDESTROYPIPELINE_PROC* flextvkDestroyPipeline;
VKAPI_PTR PFNVKDESTROYPIPELINECACHE_PROC* flextvkDestroyPipelineCache;
VKAPI_PTR PFNVKDESTROYPIPELINELAYOUT_PROC* flextvkDestroyPipelineLayout;
VKAPI_PTR PFNVKDESTROYQUERYPOOL_PROC* flextvkDestroyQueryPool;
VKAPI_PTR PFNVKDESTROYRENDERPASS_PROC* flextvkDestroyRenderPass;
VKAPI_PTR PFNVKDESTROYSAMPLER_PROC* flextvkDestroySampler;
VKAPI_PTR PFNVKDESTROYSEMAPHORE_PROC* flextvkDestroySemaphore;
VKAPI_PTR PFNVKDESTROYSHADERMODULE_PROC* flextvkDestroyShaderModule;
VKAPI_PTR PFNVKDEVICEWAITIDLE_PROC* flextvkDeviceWaitIdle;
VKAPI_PTR PFNVKENDCOMMANDBUFFER_PROC* flextvkEndCommandBuffer;
VKAPI_PTR PFNVKENUMERATEDEVICEEXTENSIONPROPERTIES_PROC* flextvkEnumerateDeviceExtensionProperties;
VKAPI_PTR PFNVKENUMERATEDEVICELAYERPROPERTIES_PROC* flextvkEnumerateDeviceLayerProperties;
VKAPI_PTR PFNVKENUMERATEPHYSICALDEVICES_PROC* flextvkEnumeratePhysicalDevices;
VKAPI_PTR PFNVKFLUSHMAPPEDMEMORYRANGES_PROC* flextvkFlushMappedMemoryRanges;
VKAPI_PTR PFNVKFREECOMMANDBUFFERS_PROC* flextvkFreeCommandBuffers;
VKAPI_PTR PFNVKFREEDESCRIPTORSETS_PROC* flextvkFreeDescriptorSets;
VKAPI_PTR PFNVKFREEMEMORY_PROC* flextvkFreeMemory;
VKAPI_PTR PFNVKGETBUFFERMEMORYREQUIREMENTS_PROC* flextvkGetBufferMemoryRequirements;
VKAPI_PTR PFNVKGETDEVICEMEMORYCOMMITMENT_PROC* flextvkGetDeviceMemoryCommitment;
VKAPI_PTR PFNVKGETDEVICEPROCADDR_PROC* flextvkGetDeviceProcAddr;
VKAPI_PTR PFNVKGETDEVICEQUEUE_PROC* flextvkGetDeviceQueue;
VKAPI_PTR PFNVKGETEVENTSTATUS_PROC* flextvkGetEventStatus;
VKAPI_PTR PFNVKGETFENCESTATUS_PROC* flextvkGetFenceStatus;
VKAPI_PTR PFNVKGETIMAGEMEMORYREQUIREMENTS_PROC* flextvkGetImageMemoryRequirements;
VKAPI_PTR PFNVKGETIMAGESPARSEMEMORYREQUIREMENTS_PROC* flextvkGetImageSparseMemoryRequirements;
VKAPI_PTR PFNVKGETIMAGESUBRESOURCELAYOUT_PROC* flextvkGetImageSubresourceLayout;
VKAPI_PTR PFNVKGETPHYSICALDEVICEFEATURES_PROC* flextvkGetPhysicalDeviceFeatures;
VKAPI_PTR PFNVKGETPHYSICALDEVICEFORMATPROPERTIES_PROC* flextvkGetPhysicalDeviceFormatProperties;
VKAPI_PTR PFNVKGETPHYSICALDEVICEIMAGEFORMATPROPERTIES_PROC* flextvkGetPhysicalDeviceImageFormatProperties;
VKAPI_PTR PFNVKGETPHYSICALDEVICEMEMORYPROPERTIES_PROC* flextvkGetPhysicalDeviceMemoryProperties;
VKAPI_PTR PFNVKGETPHYSICALDEVICEPROPERTIES_PROC* flextvkGetPhysicalDeviceProperties;
VKAPI_PTR PFNVKGETPHYSICALDEVICEQUEUEFAMILYPROPERTIES_PROC* flextvkGetPhysicalDeviceQueueFamilyProperties;
VKAPI_PTR PFNVKGETPHYSICALDEVICESPARSEIMAGEFORMATPROPERTIES_PROC* flextvkGetPhysicalDeviceSparseImageFormatProperties;
VKAPI_PTR PFNVKGETPIPELINECACHEDATA_PROC* flextvkGetPipelineCacheData;
VKAPI_PTR PFNVKGETQUERYPOOLRESULTS_PROC* flextvkGetQueryPoolResults;
VKAPI_PTR PFNVKGETRENDERAREAGRANULARITY_PROC* flextvkGetRenderAreaGranularity;
VKAPI_PTR PFNVKINVALIDATEMAPPEDMEMORYRANGES_PROC* flextvkInvalidateMappedMemoryRanges;
VKAPI_PTR PFNVKMAPMEMORY_PROC* flextvkMapMemory;
VKAPI_PTR PFNVKMERGEPIPELINECACHES_PROC* flextvkMergePipelineCaches;
VKAPI_PTR PFNVKQUEUEBINDSPARSE_PROC* flextvkQueueBindSparse;
VKAPI_PTR PFNVKQUEUESUBMIT_PROC* flextvkQueueSubmit;
VKAPI_PTR PFNVKQUEUEWAITIDLE_PROC* flextvkQueueWaitIdle;
VKAPI_PTR PFNVKRESETCOMMANDBUFFER_PROC* flextvkResetCommandBuffer;
VKAPI_PTR PFNVKRESETCOMMANDPOOL_PROC* flextvkResetCommandPool;
VKAPI_PTR PFNVKRESETDESCRIPTORPOOL_PROC* flextvkResetDescriptorPool;
VKAPI_PTR PFNVKRESETEVENT_PROC* flextvkResetEvent;
VKAPI_PTR PFNVKRESETFENCES_PROC* flextvkResetFences;
VKAPI_PTR PFNVKSETEVENT_PROC* flextvkSetEvent;
VKAPI_PTR PFNVKUNMAPMEMORY_PROC* flextvkUnmapMemory;
VKAPI_PTR PFNVKUPDATEDESCRIPTORSETS_PROC* flextvkUpdateDescriptorSets;
VKAPI_PTR PFNVKWAITFORFENCES_PROC* flextvkWaitForFences;

#define vkAllocateCommandBuffers flextvkAllocateCommandBuffers
#define vkAllocateDescriptorSets flextvkAllocateDescriptorSets
#define vkAllocateMemory flextvkAllocateMemory
#define vkBeginCommandBuffer flextvkBeginCommandBuffer
#define vkBindBufferMemory flextvkBindBufferMemory
#define vkBindImageMemory flextvkBindImageMemory
#define vkCmdBeginQuery flextvkCmdBeginQuery
#define vkCmdBeginRenderPass flextvkCmdBeginRenderPass
#define vkCmdBindDescriptorSets flextvkCmdBindDescriptorSets
#define vkCmdBindIndexBuffer flextvkCmdBindIndexBuffer
#define vkCmdBindPipeline flextvkCmdBindPipeline
#define vkCmdBindVertexBuffers flextvkCmdBindVertexBuffers
#define vkCmdBlitImage flextvkCmdBlitImage
#define vkCmdClearAttachments flextvkCmdClearAttachments
#define vkCmdClearColorImage flextvkCmdClearColorImage
#define vkCmdClearDepthStencilImage flextvkCmdClearDepthStencilImage
#define vkCmdCopyBuffer flextvkCmdCopyBuffer
#define vkCmdCopyBufferToImage flextvkCmdCopyBufferToImage
#define vkCmdCopyImage flextvkCmdCopyImage
#define vkCmdCopyImageToBuffer flextvkCmdCopyImageToBuffer
#define vkCmdCopyQueryPoolResults flextvkCmdCopyQueryPoolResults
#define vkCmdDispatch flextvkCmdDispatch
#define vkCmdDispatchIndirect flextvkCmdDispatchIndirect
#define vkCmdDraw flextvkCmdDraw
#define vkCmdDrawIndexed flextvkCmdDrawIndexed
#define vkCmdDrawIndexedIndirect flextvkCmdDrawIndexedIndirect
#define vkCmdDrawIndirect flextvkCmdDrawIndirect
#define vkCmdEndQuery flextvkCmdEndQuery
#define vkCmdEndRenderPass flextvkCmdEndRenderPass
#define vkCmdExecuteCommands flextvkCmdExecuteCommands
#define vkCmdFillBuffer flextvkCmdFillBuffer
#define vkCmdNextSubpass flextvkCmdNextSubpass
#define vkCmdPipelineBarrier flextvkCmdPipelineBarrier
#define vkCmdPushConstants flextvkCmdPushConstants
#define vkCmdResetEvent flextvkCmdResetEvent
#define vkCmdResetQueryPool flextvkCmdResetQueryPool
#define vkCmdResolveImage flextvkCmdResolveImage
#define vkCmdSetBlendConstants flextvkCmdSetBlendConstants
#define vkCmdSetDepthBias flextvkCmdSetDepthBias
#define vkCmdSetDepthBounds flextvkCmdSetDepthBounds
#define vkCmdSetEvent flextvkCmdSetEvent
#define vkCmdSetLineWidth flextvkCmdSetLineWidth
#define vkCmdSetScissor flextvkCmdSetScissor
#define vkCmdSetStencilCompareMask flextvkCmdSetStencilCompareMask
#define vkCmdSetStencilReference flextvkCmdSetStencilReference
#define vkCmdSetStencilWriteMask flextvkCmdSetStencilWriteMask
#define vkCmdSetViewport flextvkCmdSetViewport
#define vkCmdUpdateBuffer flextvkCmdUpdateBuffer
#define vkCmdWaitEvents flextvkCmdWaitEvents
#define vkCmdWriteTimestamp flextvkCmdWriteTimestamp
#define vkCreateBuffer flextvkCreateBuffer
#define vkCreateBufferView flextvkCreateBufferView
#define vkCreateCommandPool flextvkCreateCommandPool
#define vkCreateComputePipelines flextvkCreateComputePipelines
#define vkCreateDescriptorPool flextvkCreateDescriptorPool
#define vkCreateDescriptorSetLayout flextvkCreateDescriptorSetLayout
#define vkCreateDevice flextvkCreateDevice
#define vkCreateEvent flextvkCreateEvent
#define vkCreateFence flextvkCreateFence
#define vkCreateFramebuffer flextvkCreateFramebuffer
#define vkCreateGraphicsPipelines flextvkCreateGraphicsPipelines
#define vkCreateImage flextvkCreateImage
#define vkCreateImageView flextvkCreateImageView
#define vkCreatePipelineCache flextvkCreatePipelineCache
#define vkCreatePipelineLayout flextvkCreatePipelineLayout
#define vkCreateQueryPool flextvkCreateQueryPool
#define vkCreateRenderPass flextvkCreateRenderPass
#define vkCreateSampler flextvkCreateSampler
#define vkCreateSemaphore flextvkCreateSemaphore
#define vkCreateShaderModule flextvkCreateShaderModule
#define vkDestroyBuffer flextvkDestroyBuffer
#define vkDestroyBufferView flextvkDestroyBufferView
#define vkDestroyCommandPool flextvkDestroyCommandPool
#define vkDestroyDescriptorPool flextvkDestroyDescriptorPool
#define vkDestroyDescriptorSetLayout flextvkDestroyDescriptorSetLayout
#define vkDestroyDevice flextvkDestroyDevice
#define vkDestroyEvent flextvkDestroyEvent
#define vkDestroyFence flextvkDestroyFence
#define vkDestroyFramebuffer flextvkDestroyFramebuffer
#define vkDestroyImage flextvkDestroyImage
#define vkDestroyImageView flextvkDestroyImageView
#define vkDestroyInstance flextvkDestroyInstance
#define vkDestroyPipeline flextvkDestroyPipeline
#define vkDestroyPipelineCache flextvkDestroyPipelineCache
#define vkDestroyPipelineLayout flextvkDestroyPipelineLayout
#define vkDestroyQueryPool flextvkDestroyQueryPool
#define vkDestroyRenderPass flextvkDestroyRenderPass
#define vkDestroySampler flextvkDestroySampler
#define vkDestroySemaphore flextvkDestroySemaphore
#define vkDestroyShaderModule flextvkDestroyShaderModule
#define vkDeviceWaitIdle flextvkDeviceWaitIdle
#define vkEndCommandBuffer flextvkEndCommandBuffer
#define vkEnumerateDeviceExtensionProperties flextvkEnumerateDeviceExtensionProperties
#define vkEnumerateDeviceLayerProperties flextvkEnumerateDeviceLayerProperties
#define vkEnumeratePhysicalDevices flextvkEnumeratePhysicalDevices
#define vkFlushMappedMemoryRanges flextvkFlushMappedMemoryRanges
#define vkFreeCommandBuffers flextvkFreeCommandBuffers
#define vkFreeDescriptorSets flextvkFreeDescriptorSets
#define vkFreeMemory flextvkFreeMemory
#define vkGetBufferMemoryRequirements flextvkGetBufferMemoryRequirements
#define vkGetDeviceMemoryCommitment flextvkGetDeviceMemoryCommitment
#define vkGetDeviceProcAddr flextvkGetDeviceProcAddr
#define vkGetDeviceQueue flextvkGetDeviceQueue
#define vkGetEventStatus flextvkGetEventStatus
#define vkGetFenceStatus flextvkGetFenceStatus
#define vkGetImageMemoryRequirements flextvkGetImageMemoryRequirements
#define vkGetImageSparseMemoryRequirements flextvkGetImageSparseMemoryRequirements
#define vkGetImageSubresourceLayout flextvkGetImageSubresourceLayout
#define vkGetPhysicalDeviceFeatures flextvkGetPhysicalDeviceFeatures
#define vkGetPhysicalDeviceFormatProperties flextvkGetPhysicalDeviceFormatProperties
#define vkGetPhysicalDeviceImageFormatProperties flextvkGetPhysicalDeviceImageFormatProperties
#define vkGetPhysicalDeviceMemoryProperties flextvkGetPhysicalDeviceMemoryProperties
#define vkGetPhysicalDeviceProperties flextvkGetPhysicalDeviceProperties
#define vkGetPhysicalDeviceQueueFamilyProperties flextvkGetPhysicalDeviceQueueFamilyProperties
#define vkGetPhysicalDeviceSparseImageFormatProperties flextvkGetPhysicalDeviceSparseImageFormatProperties
#define vkGetPipelineCacheData flextvkGetPipelineCacheData
#define vkGetQueryPoolResults flextvkGetQueryPoolResults
#define vkGetRenderAreaGranularity flextvkGetRenderAreaGranularity
#define vkInvalidateMappedMemoryRanges flextvkInvalidateMappedMemoryRanges
#define vkMapMemory flextvkMapMemory
#define vkMergePipelineCaches flextvkMergePipelineCaches
#define vkQueueBindSparse flextvkQueueBindSparse
#define vkQueueSubmit flextvkQueueSubmit
#define vkQueueWaitIdle flextvkQueueWaitIdle
#define vkResetCommandBuffer flextvkResetCommandBuffer
#define vkResetCommandPool flextvkResetCommandPool
#define vkResetDescriptorPool flextvkResetDescriptorPool
#define vkResetEvent flextvkResetEvent
#define vkResetFences flextvkResetFences
#define vkSetEvent flextvkSetEvent
#define vkUnmapMemory flextvkUnmapMemory
#define vkUpdateDescriptorSets flextvkUpdateDescriptorSets
#define vkWaitForFences flextvkWaitForFences


/* Global function pointer initialization. Returns 0 on success or anything else on error. Use SDL_GetError() to get more details */
int flextVkInit(void);
/* Unload the global library handle */
void flextVkShutdown(void);

/* Instance-specific function pointer initialization */
void flextVkInitInstance(VkInstance instance);

#ifdef __cplusplus
}
#endif

#endif
