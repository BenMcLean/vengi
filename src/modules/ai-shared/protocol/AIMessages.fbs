namespace ai;

struct Vec3 {
	x:float;
	y:float;
	z:float;
}

table MapEntry {
	key:string (required);
	value:string;
}

table AttribEntry {
	key:int;
	current:double;
	max:double;
}

table Step {
	millis:long;
}

table Reset {
}

table Ping {
}

table Names {
	names:[string];
}

table Select {
	character_id:int;
}

table Pause {
	pause:bool;
}

table ChangeZone {
	name:string (required);
}

table AddNode {
	parent_node_id:uint;
	character_id:int;
	name:string (required);
	type:string (required);
	condition:string (required);
}

table DeleteNode {
	node_id:uint;
	character_id:int;
}

table UpdateNode {
	node_id:uint;
	character_id:int;
	name:string (required);
	type:string (required);
	condition:string (required);
}

table StateAggroEntry {
	character_id:int;
	aggro:float;
}

table StateNodeStatic {
	node_id:uint;
	name:string (required);
	type:string (required);
	parameters:string (required);
	condition_type:string (required);
	condition_parameters:string (required);
}

enum TreeNodeStatus : byte {
	UNKNOWN,
	/**
	 * Not every condition is met in order to run this node
	 * In general this means that the attached condition has to evaluate to @c true
	 */
	CANNOTEXECUTE,
	/**
	 * This behavior is still running and thus can block others
	 */
	RUNNING,
	/**
	 * The behavior ran and terminated without any problems.
	 */
	FINISHED,
	/**
	 * Controlled failure
	 */
	FAILED,
	/**
	 * Unexpected failure while executing the the node's action
	 */
	EXCEPTION,

	MAX_TREENODESTATUS
}

table StateNode {
	node_id:uint;
	condition:string (required);
	condition_state:bool;
	children:[StateNode];
	last_run:long;
	status:TreeNodeStatus;
}

table State {
	character_id:int;
	position:Vec3 (required);
	home_position:Vec3 (required);
	target_position:Vec3 (required);
	orientation:float;
	meta_attributes:[MapEntry] (required);
	attrib:[AttribEntry] (required);
}

table StateWorld {
	states:[State];
}

table CharacterStatic {
	character_id:int;
	node_statics:[StateNodeStatic];
}

table CharacterDetails {
	character_id:int;
	aggro:[StateAggroEntry];
	root:StateNode;
}

table ExecuteCommand {
	command:string (required);
}

union MsgType {
	Names,
	Select,
	Pause,
	Reset,
	Ping,
	Step,
	ChangeZone,
	AddNode,
	DeleteNode,
	UpdateNode,
	StateWorld,
	CharacterDetails,
	CharacterStatic,
	ExecuteCommand
}

table AIRootMessage {
	data:MsgType;
}

root_type AIRootMessage;
