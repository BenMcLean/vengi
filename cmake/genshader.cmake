function(read_shader_includes shaderpath include_dirs includes_list_out)
	file(READ "${shaderpath}" contents)
	string(REGEX REPLACE ";" "\\\\;" contents "${contents}")
	string(REGEX REPLACE "\r" "" contents "${contents}")
	string(REGEX REPLACE "\n" ";" contents "${contents}")
	set(_local_list "${${includes_list_out}}")
	foreach (line ${contents})
		string(FIND "${line}" "#include" out)
		if("${out}" EQUAL 0)
			string(SUBSTRING ${line} 8 -1 include_file)
			string(REPLACE " " "" include_file ${include_file})
			string(REPLACE "\"" "" include_file ${include_file})
			foreach (dir ${include_dirs})
				if (EXISTS "${dir}/${include_file}")
					list(APPEND _local_list "${dir}/${include_file}")
					break()
				endif()
			endforeach()
		endif()
	endforeach()
	list(REMOVE_DUPLICATES _local_list)
	set(${includes_list_out} ${_local_list} PARENT_SCOPE)
endfunction()

function(shader_include_dir TARGET DEPENDENCY)
	set(GEN_DIR ${GENERATE_DIR}/shaders/${DEPENDENCY}/)
	target_include_directories(${TARGET} PUBLIC ${GEN_DIR})
endfunction()

function(generate_shaders TARGET)
	if (NOT DEFINED video_SOURCE_DIR)
		message(FATAL_ERROR "video project not found")
	endif()

	set(SHADERTOOL_INCLUDE_DIRS)
	list(APPEND SHADERTOOL_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/shaders)
	set(DEPENDENCIES)
	engine_resolve_dependencies(${TARGET} DEPENDENCIES)
	foreach (D ${DEPENDENCIES})
		if (EXISTS ${${D}_SOURCE_DIR}/shaders)
			list(APPEND SHADERTOOL_INCLUDE_DIRS "${${D}_SOURCE_DIR}/shaders")
		endif()
	endforeach()
	list(REMOVE_DUPLICATES SHADERTOOL_INCLUDE_DIRS)
	set(SHADERTOOL_INCLUDE_DIRS_PARAM)
	foreach (IDIR ${SHADERTOOL_INCLUDE_DIRS})
		list(APPEND SHADERTOOL_INCLUDE_DIRS_PARAM "-I")
		list(APPEND SHADERTOOL_INCLUDE_DIRS_PARAM "${IDIR}")
	endforeach()

	set(GEN_DIR ${GENERATE_DIR}/shaders/${TARGET}/)
	engine_generated_library(${TARGET}-shaders)
	target_include_directories(${TARGET}-shaders PUBLIC ${GEN_DIR})
	target_link_libraries(${TARGET}-shaders PUBLIC video)
	foreach (SHADER ${ARGN})
		generate_shader(${TARGET}-shaders ${SHADER} ${GEN_DIR} ${SHADERTOOL_INCLUDE_DIRS})
	endforeach()
	add_dependencies(${TARGET} ${TARGET}-shaders)
	target_link_libraries(${TARGET} PUBLIC ${TARGET}-shaders)
endfunction()

function(generate_shader TARGET SHADER GEN_DIR SHADERTOOL_INCLUDE_DIRS)
	set(_template_header ${ROOT_DIR}/src/tools/shadertool/ShaderTemplate.h.in)
	set(_template_cpp ${ROOT_DIR}/src/tools/shadertool/ShaderTemplate.cpp.in)
	set(_template_constants_header ${ROOT_DIR}/src/tools/shadertool/ShaderConstantsTemplate.h.in)
	set(_template_ub ${ROOT_DIR}/src/tools/shadertool/UniformBufferTemplate.h.in)
	set(_headers)
	set(_sources)
	set(_constantsheaders)
	set(_dir ${CMAKE_CURRENT_SOURCE_DIR}/shaders)
	set(_shaders)

	if (EXISTS ${_dir}/${SHADER}.frag AND EXISTS ${_dir}/${SHADER}.vert)
		list(APPEND _shaders ${_dir}/${SHADER}.frag ${_dir}/${SHADER}.vert)
		if (EXISTS ${_dir}/${SHADER}.geom)
			list(APPEND _shaders ${_dir}/${SHADER}.geom)
		endif()
	endif()
	if (EXISTS ${_dir}/${SHADER}.comp)
		list(APPEND _shaders ${_dir}/${SHADER}.comp)
	endif()
	if (_shaders)
		set(_shadersdeps)
		foreach (s ${_shaders})
			read_shader_includes(${s} "${SHADERTOOL_INCLUDE_DIRS}" _shadersdeps)
		endforeach()
		convert_to_camel_case(${SHADER} _f)
		set(_shaderheaderpath "${GEN_DIR}${_f}Shader.h")
		set(_shadersourcepath "${GEN_DIR}${_f}Shader.cpp")
		set(_shaderconstantheaderpath "${GEN_DIR}${_f}ShaderConstants.h")
		set(MD5_VAR "")
		string(MD5 MD5_VAR ${_shaderheaderpath})
		if (NOT CMAKE_CROSSCOMPILING)
			set(_args
				${SHADERTOOL_INCLUDE_DIRS_PARAM}
				--shader ${_dir}/${SHADER}
				--constantstemplate ${_template_constants_header}
				--headertemplate ${_template_header}
				--sourcetemplate ${_template_cpp}
				--buffertemplate ${_template_ub}
				--sourcedir ${GEN_DIR}
			)
			if (USE_GLSLANG_VALIDATOR AND GLSLANG_EXECUTABLE)
				list(APPEND _args --glslang ${GLSLANG_EXECUTABLE})
			endif()
			add_custom_command(
				OUTPUT ${_shaderheaderpath} ${_shadersourcepath} ${_shaderconstantheaderpath}
				IMPLICIT_DEPENDS C ${_shaders}
				COMMENT "Validate ${SHADER}"
				COMMAND ${CMAKE_COMMAND} -E env "APP_HOMEPATH=${CMAKE_CURRENT_BINARY_DIR}/" "LSAN_OPTIONS=exitcode=0"
					$<TARGET_FILE:shadertool>
					${_args}
				DEPENDS shadertool ${_shaders} ${_shadersdeps} ${_template_header} ${_template_cpp} ${_template_ub} ${_template_constants_header}
			)
		elseif (NOT EXISTS "${GEN_DIR}${_f}Shader.h")
			message(WARNING "Source code generation must be done by native toolchain")
		else()
			set_source_files_properties(${_shaderheaderpath} ${_shadersourcepath} ${_shaderconstantheaderpath} PROPERTIES GENERATED TRUE)
		endif()
		add_custom_target(${MD5_VAR} DEPENDS ${_shaderheaderpath} ${_shadersourcepath} ${_shaderconstantheaderpath} COMMENT "Checking if re-generation is required")
		add_dependencies(codegen ${MD5_VAR})
		list(APPEND _headers ${_shaderheaderpath})
		list(APPEND _sources ${_shadersourcepath})
		list(APPEND _constantsheaders ${_shaderconstantheaderpath})
	else()
		message(FATAL_ERROR "Could not find any shader files for ${SHADER} and target '${TARGET}'")
	endif()

	target_sources(${TARGET} PRIVATE ${_sources} ${_headers} ${_constantsheaders})
endfunction()
